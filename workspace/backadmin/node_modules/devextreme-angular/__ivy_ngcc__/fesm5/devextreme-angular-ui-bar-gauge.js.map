{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-bar-gauge.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAssCA4rBsC,AAY/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMqB;;;;;KAKvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgDoB","file":"devextreme-angular-ui-bar-gauge.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxBarGauge from 'devextreme/viz/bar_gauge';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule, DxoExportModule, DxoGeometryModule, DxoLabelModule, DxoFontModule, DxoFormatModule, DxoLegendModule, DxoBorderModule, DxoItemTextFormatModule, DxoMarginModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The BarGauge widget contains several circular bars that each indicates a single value.\r\n */\r\nvar DxBarGaugeComponent = /** @class */ (function (_super) {\r\n    __extends(DxBarGaugeComponent, _super);\r\n    function DxBarGaugeComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'backgroundColorChange' },\r\n            { emit: 'barSpacingChange' },\r\n            { emit: 'baseValueChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'endValueChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'geometryChange' },\r\n            { emit: 'labelChange' },\r\n            { emit: 'legendChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'paletteChange' },\r\n            { emit: 'paletteExtensionModeChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'relativeInnerRadiusChange' },\r\n            { emit: 'resolveLabelOverlappingChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'startValueChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'valuesChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"animation\", {\r\n        /**\r\n         * Specifies animation options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('animation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('animation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"backgroundColor\", {\r\n        /**\r\n         * Specifies a color for the remaining segment of the bar's track.\r\n         */\r\n        get: function () {\r\n            return this._getOption('backgroundColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('backgroundColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"barSpacing\", {\r\n        /**\r\n         * Specifies a distance between bars in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('barSpacing');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('barSpacing', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"baseValue\", {\r\n        /**\r\n         * Specifies a base value for bars.\r\n         */\r\n        get: function () {\r\n            return this._getOption('baseValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('baseValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"endValue\", {\r\n        /**\r\n         * Specifies an end value for the gauge's invisible scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('endValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('endValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures the exporting and printing features.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"geometry\", {\r\n        /**\r\n         * Defines the shape of the gauge's arc.\r\n         */\r\n        get: function () {\r\n            return this._getOption('geometry');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('geometry', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"label\", {\r\n        /**\r\n         * Specifies the options of the labels that accompany gauge bars.\r\n         */\r\n        get: function () {\r\n            return this._getOption('label');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('label', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"legend\", {\r\n        /**\r\n         * Configures the legend.\r\n         */\r\n        get: function () {\r\n            return this._getOption('legend');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('legend', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"loadingIndicator\", {\r\n        /**\r\n         * Configures the loading indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadingIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadingIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"margin\", {\r\n        /**\r\n         * Generates space around the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('margin');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('margin', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"palette\", {\r\n        /**\r\n         * Sets the palette to be used for colorizing bars in the gauge.\r\n         */\r\n        get: function () {\r\n            return this._getOption('palette');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('palette', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"paletteExtensionMode\", {\r\n        /**\r\n         * Specifies what to do with colors in the palette when their number is less than the number of bars in the gauge.\r\n         */\r\n        get: function () {\r\n            return this._getOption('paletteExtensionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('paletteExtensionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"redrawOnResize\", {\r\n        /**\r\n         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('redrawOnResize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('redrawOnResize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"relativeInnerRadius\", {\r\n        /**\r\n         * Defines the radius of the bar that is closest to the center relatively to the radius of the topmost bar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('relativeInnerRadius');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('relativeInnerRadius', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"resolveLabelOverlapping\", {\r\n        /**\r\n         * Specifies how the widget should behave when bar labels overlap: hide certain labels or leave them overlapped.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resolveLabelOverlapping');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resolveLabelOverlapping', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"startValue\", {\r\n        /**\r\n         * Specifies a start value for the gauge's invisible scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('startValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('startValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"title\", {\r\n        /**\r\n         * Configures the widget's title.\r\n         */\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"tooltip\", {\r\n        /**\r\n         * Configures tooltips.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tooltip');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tooltip', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBarGaugeComponent.prototype, \"values\", {\r\n        /**\r\n         * Specifies the array of values to be indicated on a bar gauge.\r\n         */\r\n        get: function () {\r\n            return this._getOption('values');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('values', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxBarGaugeComponent.prototype._createInstance = function (element, options) {\r\n        return new DxBarGauge(element, options);\r\n    };\r\n    DxBarGaugeComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxBarGaugeComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('palette', changes);\r\n        this.setupChanges('values', changes);\r\n    };\r\n    DxBarGaugeComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxBarGaugeComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('palette');\r\n        this._idh.doCheck('values');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxBarGaugeComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxBarGaugeComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"animation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBarGaugeComponent.prototype, \"backgroundColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBarGaugeComponent.prototype, \"barSpacing\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBarGaugeComponent.prototype, \"baseValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBarGaugeComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBarGaugeComponent.prototype, \"endValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"geometry\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"label\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"legend\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"loadingIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"margin\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"palette\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBarGaugeComponent.prototype, \"paletteExtensionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBarGaugeComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBarGaugeComponent.prototype, \"redrawOnResize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBarGaugeComponent.prototype, \"relativeInnerRadius\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBarGaugeComponent.prototype, \"resolveLabelOverlapping\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBarGaugeComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBarGaugeComponent.prototype, \"startValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBarGaugeComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"title\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBarGaugeComponent.prototype, \"tooltip\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxBarGaugeComponent.prototype, \"values\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onTooltipHidden\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"onTooltipShown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"animationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"backgroundColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"barSpacingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"baseValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"endValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"geometryChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"labelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"legendChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"marginChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"paletteChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"paletteExtensionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"relativeInnerRadiusChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"startValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"titleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"tooltipChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBarGaugeComponent.prototype, \"valuesChange\", void 0);\r\n    DxBarGaugeComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-bar-gauge',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxBarGaugeComponent);\r\n    return DxBarGaugeComponent;\r\n}(DxComponent));\r\nvar DxBarGaugeModule = /** @class */ (function () {\r\n    function DxBarGaugeModule() {\r\n    }\r\n    DxBarGaugeModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoAnimationModule,\r\n                DxoExportModule,\r\n                DxoGeometryModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoLegendModule,\r\n                DxoBorderModule,\r\n                DxoItemTextFormatModule,\r\n                DxoMarginModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoShadowModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxBarGaugeComponent\r\n            ],\r\n            exports: [\r\n                DxBarGaugeComponent,\r\n                DxoAnimationModule,\r\n                DxoExportModule,\r\n                DxoGeometryModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoLegendModule,\r\n                DxoBorderModule,\r\n                DxoItemTextFormatModule,\r\n                DxoMarginModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoShadowModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxBarGaugeModule);\r\n    return DxBarGaugeModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxBarGaugeComponent, DxBarGaugeModule };\n"]}