{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-tree-list.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAusCAs6DsC,AAW/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMqB;;;;;KAKvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAoHoB","file":"devextreme-angular-ui-tree-list.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxTreeList from 'devextreme/ui/tree_list';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiColumnComponent, DxoColumnChooserModule, DxoColumnFixingModule, DxoTextsModule, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoEditingModule, DxoFormModule, DxoColCountByScreenModule, DxiItemModule, DxoTabPanelOptionsModule, DxiTabModule, DxoButtonOptionsModule, DxoPopupModule, DxoAnimationModule, DxoHideModule, DxoShowModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxiToolbarItemModule, DxoFilterBuilderModule, DxiCustomOperationModule, DxiFieldModule, DxoFilterOperationDescriptionsModule, DxoGroupOperationDescriptionsModule, DxoFilterBuilderPopupModule, DxoFilterPanelModule, DxoFilterRowModule, DxoOperationDescriptionsModule, DxoKeyboardNavigationModule, DxoLoadPanelModule, DxoPagerModule, DxoPagingModule, DxoRemoteOperationsModule, DxoRowDraggingModule, DxoCursorOffsetModule, DxoScrollingModule, DxoSearchPanelModule, DxoSelectionModule, DxoSortingModule, DxoStateStoringModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The TreeList is a widget that represents data from a local or remote source in the form of a multi-column tree view. This widget offers such features as sorting, filtering, editing, selection, etc.\r\n */\r\nvar DxTreeListComponent = /** @class */ (function (_super) {\r\n    __extends(DxTreeListComponent, _super);\r\n    function DxTreeListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },\r\n            { subscribe: 'cellClick', emit: 'onCellClick' },\r\n            { subscribe: 'cellDblClick', emit: 'onCellDblClick' },\r\n            { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },\r\n            { subscribe: 'cellPrepared', emit: 'onCellPrepared' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },\r\n            { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'editingStart', emit: 'onEditingStart' },\r\n            { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },\r\n            { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },\r\n            { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },\r\n            { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },\r\n            { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },\r\n            { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'initNewRow', emit: 'onInitNewRow' },\r\n            { subscribe: 'keyDown', emit: 'onKeyDown' },\r\n            { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'rowClick', emit: 'onRowClick' },\r\n            { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },\r\n            { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },\r\n            { subscribe: 'rowDblClick', emit: 'onRowDblClick' },\r\n            { subscribe: 'rowExpanded', emit: 'onRowExpanded' },\r\n            { subscribe: 'rowExpanding', emit: 'onRowExpanding' },\r\n            { subscribe: 'rowInserted', emit: 'onRowInserted' },\r\n            { subscribe: 'rowInserting', emit: 'onRowInserting' },\r\n            { subscribe: 'rowPrepared', emit: 'onRowPrepared' },\r\n            { subscribe: 'rowRemoved', emit: 'onRowRemoved' },\r\n            { subscribe: 'rowRemoving', emit: 'onRowRemoving' },\r\n            { subscribe: 'rowUpdated', emit: 'onRowUpdated' },\r\n            { subscribe: 'rowUpdating', emit: 'onRowUpdating' },\r\n            { subscribe: 'rowValidating', emit: 'onRowValidating' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'allowColumnReorderingChange' },\r\n            { emit: 'allowColumnResizingChange' },\r\n            { emit: 'autoExpandAllChange' },\r\n            { emit: 'autoNavigateToFocusedRowChange' },\r\n            { emit: 'cacheEnabledChange' },\r\n            { emit: 'cellHintEnabledChange' },\r\n            { emit: 'columnAutoWidthChange' },\r\n            { emit: 'columnChooserChange' },\r\n            { emit: 'columnFixingChange' },\r\n            { emit: 'columnHidingEnabledChange' },\r\n            { emit: 'columnMinWidthChange' },\r\n            { emit: 'columnResizingModeChange' },\r\n            { emit: 'columnsChange' },\r\n            { emit: 'columnWidthChange' },\r\n            { emit: 'customizeColumnsChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'dataStructureChange' },\r\n            { emit: 'dateSerializationFormatChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'editingChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'errorRowEnabledChange' },\r\n            { emit: 'expandedRowKeysChange' },\r\n            { emit: 'expandNodesOnFilteringChange' },\r\n            { emit: 'filterBuilderChange' },\r\n            { emit: 'filterBuilderPopupChange' },\r\n            { emit: 'filterModeChange' },\r\n            { emit: 'filterPanelChange' },\r\n            { emit: 'filterRowChange' },\r\n            { emit: 'filterSyncEnabledChange' },\r\n            { emit: 'filterValueChange' },\r\n            { emit: 'focusedColumnIndexChange' },\r\n            { emit: 'focusedRowEnabledChange' },\r\n            { emit: 'focusedRowIndexChange' },\r\n            { emit: 'focusedRowKeyChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'hasItemsExprChange' },\r\n            { emit: 'headerFilterChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'highlightChangesChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'itemsExprChange' },\r\n            { emit: 'keyboardNavigationChange' },\r\n            { emit: 'keyExprChange' },\r\n            { emit: 'loadPanelChange' },\r\n            { emit: 'noDataTextChange' },\r\n            { emit: 'pagerChange' },\r\n            { emit: 'pagingChange' },\r\n            { emit: 'parentIdExprChange' },\r\n            { emit: 'remoteOperationsChange' },\r\n            { emit: 'renderAsyncChange' },\r\n            { emit: 'repaintChangesOnlyChange' },\r\n            { emit: 'rootValueChange' },\r\n            { emit: 'rowAlternationEnabledChange' },\r\n            { emit: 'rowDraggingChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollingChange' },\r\n            { emit: 'searchPanelChange' },\r\n            { emit: 'selectedRowKeysChange' },\r\n            { emit: 'selectionChange' },\r\n            { emit: 'showBordersChange' },\r\n            { emit: 'showColumnHeadersChange' },\r\n            { emit: 'showColumnLinesChange' },\r\n            { emit: 'showRowLinesChange' },\r\n            { emit: 'sortingChange' },\r\n            { emit: 'stateStoringChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'twoWayBindingEnabledChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'wordWrapEnabledChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"accessKey\", {\r\n        /**\r\n         * Specifies the shortcut key that sets focus on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"activeStateEnabled\", {\r\n        /**\r\n         * Specifies whether or not the widget changes its state when interacting with a user.\r\n         */\r\n        get: function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"allowColumnReordering\", {\r\n        /**\r\n         * Specifies whether a user can reorder columns.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowColumnReordering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowColumnReordering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"allowColumnResizing\", {\r\n        /**\r\n         * Specifies whether a user can resize columns.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowColumnResizing');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowColumnResizing', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"autoExpandAll\", {\r\n        /**\r\n         * Specifies whether all rows are expanded initially.\r\n         */\r\n        get: function () {\r\n            return this._getOption('autoExpandAll');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('autoExpandAll', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"autoNavigateToFocusedRow\", {\r\n        /**\r\n         * Automatically scrolls to the focused row when the focusedRowKey is changed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('autoNavigateToFocusedRow');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('autoNavigateToFocusedRow', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"cacheEnabled\", {\r\n        /**\r\n         * Specifies whether data should be cached.\r\n         */\r\n        get: function () {\r\n            return this._getOption('cacheEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('cacheEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"cellHintEnabled\", {\r\n        /**\r\n         * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.\r\n         */\r\n        get: function () {\r\n            return this._getOption('cellHintEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('cellHintEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnAutoWidth\", {\r\n        /**\r\n         * Specifies whether columns should adjust their widths to the content.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnAutoWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnAutoWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnChooser\", {\r\n        /**\r\n         * Configures the column chooser.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnChooser');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnChooser', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnFixing\", {\r\n        /**\r\n         * Configures column fixing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnFixing');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnFixing', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnHidingEnabled\", {\r\n        /**\r\n         * Specifies whether the widget should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is \"widget\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnHidingEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnHidingEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnMinWidth\", {\r\n        /**\r\n         * Specifies the minimum width of columns.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnMinWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnMinWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnResizingMode\", {\r\n        /**\r\n         * Specifies how the widget resizes columns. Applies only if allowColumnResizing is true.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnResizingMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnResizingMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columns\", {\r\n        /**\r\n         * Configures columns.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columns');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columns', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnWidth\", {\r\n        /**\r\n         * Specifies the width for all data columns. Has a lower priority than the column.width option.\r\n         */\r\n        get: function () {\r\n            return this._getOption('columnWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('columnWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"customizeColumns\", {\r\n        /**\r\n         * Customizes columns after they are created.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customizeColumns');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customizeColumns', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Binds the widget to data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"dataStructure\", {\r\n        /**\r\n         * Notifies the widget of the used data structure.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataStructure');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataStructure', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"dateSerializationFormat\", {\r\n        /**\r\n         * Specifies the format in which date-time values should be sent to the server. Use it only if you do not specify the dataSource at design time.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dateSerializationFormat');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dateSerializationFormat', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"editing\", {\r\n        /**\r\n         * Configures editing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('editing');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('editing', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"errorRowEnabled\", {\r\n        /**\r\n         * Indicates whether to show the error row.\r\n         */\r\n        get: function () {\r\n            return this._getOption('errorRowEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('errorRowEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"expandedRowKeys\", {\r\n        /**\r\n         * Specifies keys of the initially expanded rows.\r\n         */\r\n        get: function () {\r\n            return this._getOption('expandedRowKeys');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('expandedRowKeys', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"expandNodesOnFiltering\", {\r\n        /**\r\n         * Specifies whether nodes appear expanded or collapsed after filtering is applied.\r\n         */\r\n        get: function () {\r\n            return this._getOption('expandNodesOnFiltering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('expandNodesOnFiltering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterBuilder\", {\r\n        /**\r\n         * Configures the integrated filter builder.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterBuilder');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterBuilder', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterBuilderPopup\", {\r\n        /**\r\n         * Configures the popup in which the integrated filter builder is shown.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterBuilderPopup');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterBuilderPopup', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterMode\", {\r\n        /**\r\n         * Specifies whether filter and search results should include matching rows only, matching rows with ancestors, or matching rows with ancestors and descendants (full branch).\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterPanel\", {\r\n        /**\r\n         * Configures the filter panel.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterRow\", {\r\n        /**\r\n         * Configures the filter row.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterRow');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterRow', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterSyncEnabled\", {\r\n        /**\r\n         * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue option.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterSyncEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterSyncEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"filterValue\", {\r\n        /**\r\n         * Specifies a filter expression.\r\n         */\r\n        get: function () {\r\n            return this._getOption('filterValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('filterValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"focusedColumnIndex\", {\r\n        /**\r\n         * The index of the column that contains the focused data cell.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusedColumnIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusedColumnIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowEnabled\", {\r\n        /**\r\n         * Specifies whether the focused row feature is enabled.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusedRowEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusedRowEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowIndex\", {\r\n        /**\r\n         * Specifies the initially or currently focused grid row's index. Use it when focusedRowEnabled is true.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusedRowIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusedRowIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"focusedRowKey\", {\r\n        /**\r\n         * Specifies initially or currently focused grid row's key. Use it when focusedRowEnabled is true.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusedRowKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusedRowKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"focusStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget can be focused using keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"hasItemsExpr\", {\r\n        /**\r\n         * Specifies which data field defines whether the node has children.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hasItemsExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hasItemsExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"headerFilter\", {\r\n        /**\r\n         * Configures the header filter feature.\r\n         */\r\n        get: function () {\r\n            return this._getOption('headerFilter');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('headerFilter', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"highlightChanges\", {\r\n        /**\r\n         * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.\r\n         */\r\n        get: function () {\r\n            return this._getOption('highlightChanges');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('highlightChanges', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"hoverStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget changes its state when a user pauses on it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"itemsExpr\", {\r\n        /**\r\n         * Specifies which data field contains nested items. Set this option when your data has a hierarchical structure.\r\n         */\r\n        get: function () {\r\n            return this._getOption('itemsExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('itemsExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"keyboardNavigation\", {\r\n        /**\r\n         * Configures keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('keyboardNavigation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('keyboardNavigation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"keyExpr\", {\r\n        /**\r\n         * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique.\r\n         */\r\n        get: function () {\r\n            return this._getOption('keyExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('keyExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"loadPanel\", {\r\n        /**\r\n         * Configures the load panel.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"noDataText\", {\r\n        /**\r\n         * Specifies text shown when the widget does not display any data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('noDataText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('noDataText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"pager\", {\r\n        /**\r\n         * Configures the pager.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pager');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pager', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"paging\", {\r\n        /**\r\n         * Configures paging.\r\n         */\r\n        get: function () {\r\n            return this._getOption('paging');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('paging', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"parentIdExpr\", {\r\n        /**\r\n         * Specifies which data field provides parent keys.\r\n         */\r\n        get: function () {\r\n            return this._getOption('parentIdExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('parentIdExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"remoteOperations\", {\r\n        /**\r\n         * Notifies the TreeList of the server's data processing operations. Applies only if data has a plain structure.\r\n         */\r\n        get: function () {\r\n            return this._getOption('remoteOperations');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('remoteOperations', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"renderAsync\", {\r\n        /**\r\n         * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.\r\n         */\r\n        get: function () {\r\n            return this._getOption('renderAsync');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('renderAsync', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"repaintChangesOnly\", {\r\n        /**\r\n         * Specifies whether to repaint only those cells whose data changed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('repaintChangesOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('repaintChangesOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"rootValue\", {\r\n        /**\r\n         * Specifies the root node's identifier. Applies if dataStructure is \"plain\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('rootValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rootValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"rowAlternationEnabled\", {\r\n        /**\r\n         * Specifies whether rows should be shaded differently.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rowAlternationEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rowAlternationEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"rowDragging\", {\r\n        /**\r\n         * Configures row reordering using drag and drop gestures.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rowDragging');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rowDragging', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"scrolling\", {\r\n        /**\r\n         * Configures scrolling.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrolling');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrolling', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"searchPanel\", {\r\n        /**\r\n         * Configures the search panel.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"selectedRowKeys\", {\r\n        /**\r\n         * Allows you to select rows or determine which rows are selected.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedRowKeys');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedRowKeys', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"selection\", {\r\n        /**\r\n         * Configures runtime selection.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selection');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selection', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"showBorders\", {\r\n        /**\r\n         * Specifies whether the outer borders of the widget are visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showBorders');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showBorders', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"showColumnHeaders\", {\r\n        /**\r\n         * Specifies whether column headers are visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showColumnHeaders');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showColumnHeaders', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"showColumnLines\", {\r\n        /**\r\n         * Specifies whether vertical lines that separate one column from another are visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showColumnLines');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showColumnLines', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"showRowLines\", {\r\n        /**\r\n         * Specifies whether horizontal lines that separate one row from another are visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showRowLines');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showRowLines', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"sorting\", {\r\n        /**\r\n         * Configures runtime sorting.\r\n         */\r\n        get: function () {\r\n            return this._getOption('sorting');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('sorting', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"stateStoring\", {\r\n        /**\r\n         * Configures state storing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('stateStoring');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('stateStoring', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"tabIndex\", {\r\n        /**\r\n         * Specifies the number of the element when the Tab key is used for navigating.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"twoWayBindingEnabled\", {\r\n        /**\r\n         * Specifies whether to enable two-way data binding.\r\n         */\r\n        get: function () {\r\n            return this._getOption('twoWayBindingEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('twoWayBindingEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"visible\", {\r\n        /**\r\n         * Specifies whether the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"wordWrapEnabled\", {\r\n        /**\r\n         * Specifies whether text that does not fit into a column should be wrapped.\r\n         */\r\n        get: function () {\r\n            return this._getOption('wordWrapEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('wordWrapEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeListComponent.prototype, \"columnsChildren\", {\r\n        get: function () {\r\n            return this._getOption('columns');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('columns', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxTreeListComponent.prototype._createInstance = function (element, options) {\r\n        return new DxTreeList(element, options);\r\n    };\r\n    DxTreeListComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxTreeListComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('columns', changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('expandedRowKeys', changes);\r\n        this.setupChanges('selectedRowKeys', changes);\r\n    };\r\n    DxTreeListComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxTreeListComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('columns');\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('expandedRowKeys');\r\n        this._idh.doCheck('selectedRowKeys');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxTreeListComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxTreeListComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"accessKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"activeStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"allowColumnReordering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"allowColumnResizing\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"autoExpandAll\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"autoNavigateToFocusedRow\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"cacheEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"cellHintEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"columnAutoWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"columnChooser\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"columnFixing\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"columnHidingEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeListComponent.prototype, \"columnMinWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"columnResizingMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxTreeListComponent.prototype, \"columns\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeListComponent.prototype, \"columnWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxTreeListComponent.prototype, \"customizeColumns\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"dataStructure\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"dateSerializationFormat\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"editing\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"errorRowEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxTreeListComponent.prototype, \"expandedRowKeys\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"expandNodesOnFiltering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterBuilder\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterBuilderPopup\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"filterMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterPanel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterRow\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterSyncEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"filterValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeListComponent.prototype, \"focusedColumnIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"focusedRowEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeListComponent.prototype, \"focusedRowIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"focusedRowKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"focusStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"hasItemsExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"headerFilter\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"highlightChanges\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"hoverStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"itemsExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"keyboardNavigation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"keyExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"loadPanel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeListComponent.prototype, \"noDataText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"pager\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"paging\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"parentIdExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"remoteOperations\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"renderAsync\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"repaintChangesOnly\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"rootValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"rowAlternationEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"rowDragging\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"scrolling\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"searchPanel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxTreeListComponent.prototype, \"selectedRowKeys\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"selection\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"showBorders\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"showColumnHeaders\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"showColumnLines\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"showRowLines\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"sorting\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"stateStoring\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeListComponent.prototype, \"tabIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"twoWayBindingEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeListComponent.prototype, \"wordWrapEnabled\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onAdaptiveDetailRowPreparing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onCellClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onCellDblClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onCellHoverChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onCellPrepared\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onContextMenuPreparing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onDataErrorOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onEditingStart\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onEditorPrepared\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onEditorPreparing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onFocusedCellChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onFocusedCellChanging\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onFocusedRowChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onFocusedRowChanging\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onInitNewRow\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onKeyDown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onNodesInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowCollapsed\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowCollapsing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowDblClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowExpanded\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowExpanding\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowInserted\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowInserting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowPrepared\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowRemoved\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowRemoving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowUpdated\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowUpdating\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onRowValidating\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"onToolbarPreparing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"accessKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"allowColumnReorderingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"allowColumnResizingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"autoExpandAllChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"autoNavigateToFocusedRowChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"cacheEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"cellHintEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnAutoWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnChooserChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnFixingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnHidingEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnMinWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnResizingModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"columnWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"customizeColumnsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"dataStructureChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"dateSerializationFormatChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"editingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"errorRowEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"expandedRowKeysChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"expandNodesOnFilteringChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterBuilderChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterBuilderPopupChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterPanelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterRowChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterSyncEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"filterValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"focusedColumnIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"focusedRowEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"focusedRowIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"focusedRowKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"hasItemsExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"headerFilterChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"highlightChangesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"itemsExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"keyboardNavigationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"keyExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"loadPanelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"noDataTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"pagerChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"pagingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"parentIdExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"remoteOperationsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"renderAsyncChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"repaintChangesOnlyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"rootValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"rowAlternationEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"rowDraggingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"scrollingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"searchPanelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"selectedRowKeysChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"selectionChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"showBordersChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"showColumnHeadersChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"showColumnLinesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"showRowLinesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"sortingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"stateStoringChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"tabIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"twoWayBindingEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeListComponent.prototype, \"wordWrapEnabledChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiColumnComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeListComponent.prototype, \"columnsChildren\", null);\r\n    DxTreeListComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-tree-list',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxTreeListComponent);\r\n    return DxTreeListComponent;\r\n}(DxComponent));\r\nvar DxTreeListModule = /** @class */ (function () {\r\n    function DxTreeListModule() {\r\n    }\r\n    DxTreeListModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoColumnChooserModule,\r\n                DxoColumnFixingModule,\r\n                DxoTextsModule,\r\n                DxiColumnModule,\r\n                DxiButtonModule,\r\n                DxoHeaderFilterModule,\r\n                DxoLookupModule,\r\n                DxoFormatModule,\r\n                DxoFormItemModule,\r\n                DxoLabelModule,\r\n                DxiValidationRuleModule,\r\n                DxoEditingModule,\r\n                DxoFormModule,\r\n                DxoColCountByScreenModule,\r\n                DxiItemModule,\r\n                DxoTabPanelOptionsModule,\r\n                DxiTabModule,\r\n                DxoButtonOptionsModule,\r\n                DxoPopupModule,\r\n                DxoAnimationModule,\r\n                DxoHideModule,\r\n                DxoShowModule,\r\n                DxoPositionModule,\r\n                DxoAtModule,\r\n                DxoBoundaryOffsetModule,\r\n                DxoCollisionModule,\r\n                DxoMyModule,\r\n                DxoOffsetModule,\r\n                DxiToolbarItemModule,\r\n                DxoFilterBuilderModule,\r\n                DxiCustomOperationModule,\r\n                DxiFieldModule,\r\n                DxoFilterOperationDescriptionsModule,\r\n                DxoGroupOperationDescriptionsModule,\r\n                DxoFilterBuilderPopupModule,\r\n                DxoFilterPanelModule,\r\n                DxoFilterRowModule,\r\n                DxoOperationDescriptionsModule,\r\n                DxoKeyboardNavigationModule,\r\n                DxoLoadPanelModule,\r\n                DxoPagerModule,\r\n                DxoPagingModule,\r\n                DxoRemoteOperationsModule,\r\n                DxoRowDraggingModule,\r\n                DxoCursorOffsetModule,\r\n                DxoScrollingModule,\r\n                DxoSearchPanelModule,\r\n                DxoSelectionModule,\r\n                DxoSortingModule,\r\n                DxoStateStoringModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxTreeListComponent\r\n            ],\r\n            exports: [\r\n                DxTreeListComponent,\r\n                DxoColumnChooserModule,\r\n                DxoColumnFixingModule,\r\n                DxoTextsModule,\r\n                DxiColumnModule,\r\n                DxiButtonModule,\r\n                DxoHeaderFilterModule,\r\n                DxoLookupModule,\r\n                DxoFormatModule,\r\n                DxoFormItemModule,\r\n                DxoLabelModule,\r\n                DxiValidationRuleModule,\r\n                DxoEditingModule,\r\n                DxoFormModule,\r\n                DxoColCountByScreenModule,\r\n                DxiItemModule,\r\n                DxoTabPanelOptionsModule,\r\n                DxiTabModule,\r\n                DxoButtonOptionsModule,\r\n                DxoPopupModule,\r\n                DxoAnimationModule,\r\n                DxoHideModule,\r\n                DxoShowModule,\r\n                DxoPositionModule,\r\n                DxoAtModule,\r\n                DxoBoundaryOffsetModule,\r\n                DxoCollisionModule,\r\n                DxoMyModule,\r\n                DxoOffsetModule,\r\n                DxiToolbarItemModule,\r\n                DxoFilterBuilderModule,\r\n                DxiCustomOperationModule,\r\n                DxiFieldModule,\r\n                DxoFilterOperationDescriptionsModule,\r\n                DxoGroupOperationDescriptionsModule,\r\n                DxoFilterBuilderPopupModule,\r\n                DxoFilterPanelModule,\r\n                DxoFilterRowModule,\r\n                DxoOperationDescriptionsModule,\r\n                DxoKeyboardNavigationModule,\r\n                DxoLoadPanelModule,\r\n                DxoPagerModule,\r\n                DxoPagingModule,\r\n                DxoRemoteOperationsModule,\r\n                DxoRowDraggingModule,\r\n                DxoCursorOffsetModule,\r\n                DxoScrollingModule,\r\n                DxoSearchPanelModule,\r\n                DxoSelectionModule,\r\n                DxoSortingModule,\r\n                DxoStateStoringModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxTreeListModule);\r\n    return DxTreeListModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxTreeListComponent, DxTreeListModule };\n"]}