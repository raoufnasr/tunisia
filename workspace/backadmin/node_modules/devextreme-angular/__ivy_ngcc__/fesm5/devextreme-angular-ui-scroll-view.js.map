{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-scroll-view.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAoZwC,AAUjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKuB;;;;;KAKzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgBsB","file":"devextreme-angular-ui-scroll-view.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxScrollView from 'devextreme/ui/scroll_view';\nimport { DxTemplateHost, WatcherHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The ScrollView is a widget that enables a user to scroll its content.\r\n */\r\nvar DxScrollViewComponent = /** @class */ (function (_super) {\r\n    __extends(DxScrollViewComponent, _super);\r\n    function DxScrollViewComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'pullDown', emit: 'onPullDown' },\r\n            { subscribe: 'reachBottom', emit: 'onReachBottom' },\r\n            { subscribe: 'scroll', emit: 'onScroll' },\r\n            { subscribe: 'updated', emit: 'onUpdated' },\r\n            { emit: 'bounceEnabledChange' },\r\n            { emit: 'directionChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'pulledDownTextChange' },\r\n            { emit: 'pullingDownTextChange' },\r\n            { emit: 'reachBottomTextChange' },\r\n            { emit: 'refreshingTextChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollByContentChange' },\r\n            { emit: 'scrollByThumbChange' },\r\n            { emit: 'showScrollbarChange' },\r\n            { emit: 'useNativeChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"bounceEnabled\", {\r\n        /**\r\n         * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n         */\r\n        get: function () {\r\n            return this._getOption('bounceEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('bounceEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"direction\", {\r\n        /**\r\n         * A string value specifying the available scrolling directions.\r\n         */\r\n        get: function () {\r\n            return this._getOption('direction');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('direction', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"disabled\", {\r\n        /**\r\n         * A Boolean value specifying whether or not the widget can respond to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"pulledDownText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pulledDownText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pulledDownText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"pullingDownText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pullingDownText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pullingDownText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"reachBottomText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom.\r\n         */\r\n        get: function () {\r\n            return this._getOption('reachBottomText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('reachBottomText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"refreshingText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel displayed when the content is being refreshed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('refreshingText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('refreshingText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"scrollByContent\", {\r\n        /**\r\n         * A Boolean value specifying whether or not an end-user can scroll the widget content swiping it up or down. Applies only if useNative is false\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollByContent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollByContent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"scrollByThumb\", {\r\n        /**\r\n         * A Boolean value specifying whether or not an end-user can scroll the widget content using the scrollbar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollByThumb');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollByThumb', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"showScrollbar\", {\r\n        /**\r\n         * Specifies when the widget shows the scrollbar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showScrollbar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showScrollbar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"useNative\", {\r\n        /**\r\n         * Indicates whether to use native or simulated scrolling.\r\n         */\r\n        get: function () {\r\n            return this._getOption('useNative');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('useNative', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxScrollViewComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxScrollViewComponent.prototype._createInstance = function (element, options) {\r\n        return new DxScrollView(element, options);\r\n    };\r\n    DxScrollViewComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxScrollViewComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"bounceEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"direction\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxScrollViewComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxScrollViewComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"pulledDownText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"pullingDownText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"reachBottomText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"refreshingText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"scrollByContent\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"scrollByThumb\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxScrollViewComponent.prototype, \"showScrollbar\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxScrollViewComponent.prototype, \"useNative\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxScrollViewComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onPullDown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onReachBottom\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onScroll\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"onUpdated\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"bounceEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"directionChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"pulledDownTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"pullingDownTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"reachBottomTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"refreshingTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"scrollByContentChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"scrollByThumbChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"showScrollbarChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"useNativeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxScrollViewComponent.prototype, \"widthChange\", void 0);\r\n    DxScrollViewComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-scroll-view',\r\n            template: '<ng-content></ng-content>',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost\r\n            ]\r\n        }),\r\n        __param(6, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxScrollViewComponent);\r\n    return DxScrollViewComponent;\r\n}(DxComponent));\r\nvar DxScrollViewModule = /** @class */ (function () {\r\n    function DxScrollViewModule() {\r\n    }\r\n    DxScrollViewModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxScrollViewComponent\r\n            ],\r\n            exports: [\r\n                DxScrollViewComponent,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxScrollViewModule);\r\n    return DxScrollViewModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxScrollViewComponent, DxScrollViewModule };\n"]}