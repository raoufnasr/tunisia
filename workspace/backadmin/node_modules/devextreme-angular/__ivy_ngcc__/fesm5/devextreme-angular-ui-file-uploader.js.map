{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-file-uploader.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAmsoC0C,AAYnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMyB;;;;;KAK3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgBwB","file":"devextreme-angular-ui-file-uploader.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxFileUploader from 'devextreme/ui/file_uploader';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return DxFileUploaderComponent; }),\r\n    multi: true\r\n};\r\n/**\r\n * The FileUploader widget enables an end user to upload files to the server. An end user can select files in the file explorer or drag and drop files to the FileUploader area on the page.\r\n */\r\nvar DxFileUploaderComponent = /** @class */ (function (_super) {\r\n    __extends(DxFileUploaderComponent, _super);\r\n    function DxFileUploaderComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this.touched = function (_) { };\r\n        _this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'progress', emit: 'onProgress' },\r\n            { subscribe: 'uploadAborted', emit: 'onUploadAborted' },\r\n            { subscribe: 'uploaded', emit: 'onUploaded' },\r\n            { subscribe: 'uploadError', emit: 'onUploadError' },\r\n            { subscribe: 'uploadStarted', emit: 'onUploadStarted' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'abortUploadChange' },\r\n            { emit: 'acceptChange' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'allowCancelingChange' },\r\n            { emit: 'allowedFileExtensionsChange' },\r\n            { emit: 'chunkSizeChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'invalidFileExtensionMessageChange' },\r\n            { emit: 'invalidMaxFileSizeMessageChange' },\r\n            { emit: 'invalidMinFileSizeMessageChange' },\r\n            { emit: 'isValidChange' },\r\n            { emit: 'labelTextChange' },\r\n            { emit: 'maxFileSizeChange' },\r\n            { emit: 'minFileSizeChange' },\r\n            { emit: 'multipleChange' },\r\n            { emit: 'nameChange' },\r\n            { emit: 'progressChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'readyToUploadMessageChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'selectButtonTextChange' },\r\n            { emit: 'showFileListChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'uploadButtonTextChange' },\r\n            { emit: 'uploadChunkChange' },\r\n            { emit: 'uploadedMessageChange' },\r\n            { emit: 'uploadFailedMessageChange' },\r\n            { emit: 'uploadFileChange' },\r\n            { emit: 'uploadHeadersChange' },\r\n            { emit: 'uploadMethodChange' },\r\n            { emit: 'uploadModeChange' },\r\n            { emit: 'uploadUrlChange' },\r\n            { emit: 'validationErrorChange' },\r\n            { emit: 'validationErrorsChange' },\r\n            { emit: 'validationStatusChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"abortUpload\", {\r\n        /**\r\n         * A function that cancels the file upload.\r\n         */\r\n        get: function () {\r\n            return this._getOption('abortUpload');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('abortUpload', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"accept\", {\r\n        /**\r\n         * Specifies a file type or several types accepted by the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accept');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accept', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"accessKey\", {\r\n        /**\r\n         * Specifies the shortcut key that sets focus on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"activeStateEnabled\", {\r\n        /**\r\n         * Specifies whether or not the widget changes its state when interacting with a user.\r\n         */\r\n        get: function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"allowCanceling\", {\r\n        /**\r\n         * Specifies if an end user can remove a file from the selection and interrupt uploading.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowCanceling');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowCanceling', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"allowedFileExtensions\", {\r\n        /**\r\n         * Restricts file extensions that can be uploaded to the server.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowedFileExtensions');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowedFileExtensions', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"chunkSize\", {\r\n        /**\r\n         * Specifies the chunk size in bytes. Applies only if uploadMode is \"instantly\" or \"useButtons\". Requires a server that can process file chunks.\r\n         */\r\n        get: function () {\r\n            return this._getOption('chunkSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('chunkSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"focusStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget can be focused using keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"hoverStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget changes its state when a user pauses on it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"invalidFileExtensionMessage\", {\r\n        /**\r\n         * The text displayed when the extension of the file being uploaded is not an allowed file extension.\r\n         */\r\n        get: function () {\r\n            return this._getOption('invalidFileExtensionMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('invalidFileExtensionMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"invalidMaxFileSizeMessage\", {\r\n        /**\r\n         * The text displayed when the size of the file being uploaded is greater than the maxFileSize.\r\n         */\r\n        get: function () {\r\n            return this._getOption('invalidMaxFileSizeMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('invalidMaxFileSizeMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"invalidMinFileSizeMessage\", {\r\n        /**\r\n         * The text displayed when the size of the file being uploaded is less than the minFileSize.\r\n         */\r\n        get: function () {\r\n            return this._getOption('invalidMinFileSizeMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('invalidMinFileSizeMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"isValid\", {\r\n        /**\r\n         * Specifies or indicates whether the editor's value is valid.\r\n         */\r\n        get: function () {\r\n            return this._getOption('isValid');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('isValid', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"labelText\", {\r\n        /**\r\n         * Specifies the text displayed on the area to which an end-user can drop a file.\r\n         */\r\n        get: function () {\r\n            return this._getOption('labelText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('labelText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"maxFileSize\", {\r\n        /**\r\n         * Specifies the maximum file size (in bytes) allowed for uploading. Applies only if uploadMode is \"instantly\" or \"useButtons\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxFileSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxFileSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"minFileSize\", {\r\n        /**\r\n         * Specifies the minimum file size (in bytes) allowed for uploading. Applies only if uploadMode is \"instantly\" or \"useButtons\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('minFileSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('minFileSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"multiple\", {\r\n        /**\r\n         * Specifies whether the widget enables an end-user to select a single file or multiple files.\r\n         */\r\n        get: function () {\r\n            return this._getOption('multiple');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('multiple', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"name\", {\r\n        /**\r\n         * Specifies the value passed to the name attribute of the underlying input element. Required to access uploaded files on the server.\r\n         */\r\n        get: function () {\r\n            return this._getOption('name');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('name', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"progress\", {\r\n        /**\r\n         * Gets the current progress in percentages.\r\n         */\r\n        get: function () {\r\n            return this._getOption('progress');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('progress', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"readOnly\", {\r\n        /**\r\n         * Specifies whether the editor is read-only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('readOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('readOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"readyToUploadMessage\", {\r\n        /**\r\n         * The message displayed by the widget when it is ready to upload the specified files.\r\n         */\r\n        get: function () {\r\n            return this._getOption('readyToUploadMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('readyToUploadMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"selectButtonText\", {\r\n        /**\r\n         * The text displayed on the button that opens the file browser.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectButtonText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectButtonText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"showFileList\", {\r\n        /**\r\n         * Specifies whether or not the widget displays the list of selected files.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showFileList');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showFileList', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"tabIndex\", {\r\n        /**\r\n         * Specifies the number of the element when the Tab key is used for navigating.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadButtonText\", {\r\n        /**\r\n         * The text displayed on the button that starts uploading.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadButtonText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadButtonText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadChunk\", {\r\n        /**\r\n         * A function that uploads a file in chunks.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadChunk');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadChunk', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadedMessage\", {\r\n        /**\r\n         * The message displayed by the widget when uploading is finished.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadedMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadedMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadFailedMessage\", {\r\n        /**\r\n         * The message displayed by the widget on uploading failure.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadFailedMessage');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadFailedMessage', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadFile\", {\r\n        /**\r\n         * A function that uploads a file.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadFile');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadFile', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadHeaders\", {\r\n        /**\r\n         * Specifies headers for the upload request.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadHeaders');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadHeaders', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadMethod\", {\r\n        /**\r\n         * Specifies the method for the upload request.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadMethod');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadMethod', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadMode\", {\r\n        /**\r\n         * Specifies how the widget uploads files.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"uploadUrl\", {\r\n        /**\r\n         * Specifies a target Url for the upload request.\r\n         */\r\n        get: function () {\r\n            return this._getOption('uploadUrl');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('uploadUrl', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"validationError\", {\r\n        /**\r\n         * Information on the broken validation rule. Contains the first item from the validationErrors array.\r\n         */\r\n        get: function () {\r\n            return this._getOption('validationError');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationError', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"validationErrors\", {\r\n        /**\r\n         * An array of the validation rules that failed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('validationErrors');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationErrors', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"validationStatus\", {\r\n        /**\r\n         * Indicates or specifies the current validation status.\r\n         */\r\n        get: function () {\r\n            return this._getOption('validationStatus');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationStatus', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"value\", {\r\n        /**\r\n         * Specifies a File instance representing the selected file. Read-only when uploadMode is \"useForm\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('value');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('value', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"visible\", {\r\n        /**\r\n         * Specifies whether the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxFileUploaderComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxFileUploaderComponent.prototype.change = function (_) { };\r\n    DxFileUploaderComponent.prototype._createInstance = function (element, options) {\r\n        return new DxFileUploader(element, options);\r\n    };\r\n    DxFileUploaderComponent.prototype.writeValue = function (value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    };\r\n    DxFileUploaderComponent.prototype.setDisabledState = function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n    };\r\n    DxFileUploaderComponent.prototype.registerOnChange = function (fn) { this.change = fn; };\r\n    DxFileUploaderComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };\r\n    DxFileUploaderComponent.prototype._createWidget = function (element) {\r\n        var _this = this;\r\n        _super.prototype._createWidget.call(this, element);\r\n        this.instance.on('focusOut', function (e) {\r\n            _this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    };\r\n    DxFileUploaderComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxFileUploaderComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('allowedFileExtensions', changes);\r\n        this.setupChanges('validationErrors', changes);\r\n        this.setupChanges('value', changes);\r\n    };\r\n    DxFileUploaderComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxFileUploaderComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('allowedFileExtensions');\r\n        this._idh.doCheck('validationErrors');\r\n        this._idh.doCheck('value');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxFileUploaderComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxFileUploaderComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxFileUploaderComponent.prototype, \"abortUpload\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"accept\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"accessKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"activeStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"allowCanceling\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxFileUploaderComponent.prototype, \"allowedFileExtensions\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxFileUploaderComponent.prototype, \"chunkSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxFileUploaderComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"focusStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxFileUploaderComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"hoverStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"invalidFileExtensionMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"invalidMaxFileSizeMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"invalidMinFileSizeMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"isValid\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"labelText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxFileUploaderComponent.prototype, \"maxFileSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxFileUploaderComponent.prototype, \"minFileSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"multiple\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"name\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxFileUploaderComponent.prototype, \"progress\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"readOnly\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"readyToUploadMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"selectButtonText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"showFileList\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxFileUploaderComponent.prototype, \"tabIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadButtonText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxFileUploaderComponent.prototype, \"uploadChunk\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadedMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadFailedMessage\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxFileUploaderComponent.prototype, \"uploadFile\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxFileUploaderComponent.prototype, \"uploadHeaders\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadMethod\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"uploadUrl\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxFileUploaderComponent.prototype, \"validationError\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxFileUploaderComponent.prototype, \"validationErrors\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxFileUploaderComponent.prototype, \"validationStatus\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxFileUploaderComponent.prototype, \"value\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxFileUploaderComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxFileUploaderComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onProgress\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onUploadAborted\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onUploaded\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onUploadError\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onUploadStarted\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onValueChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"abortUploadChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"acceptChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"accessKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"allowCancelingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"allowedFileExtensionsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"chunkSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"invalidFileExtensionMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"invalidMaxFileSizeMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"invalidMinFileSizeMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"isValidChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"labelTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"maxFileSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"minFileSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"multipleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"nameChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"progressChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"readOnlyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"readyToUploadMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"selectButtonTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"showFileListChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"tabIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadButtonTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadChunkChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadedMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadFailedMessageChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadFileChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadHeadersChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadMethodChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"uploadUrlChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"validationErrorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"validationErrorsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"validationStatusChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"valueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxFileUploaderComponent.prototype, \"onBlur\", void 0);\r\n    __decorate([\r\n        HostListener('valueChange', ['$event']),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], DxFileUploaderComponent.prototype, \"change\", null);\r\n    __decorate([\r\n        HostListener('onBlur', ['$event']),\r\n        __metadata(\"design:type\", Object)\r\n    ], DxFileUploaderComponent.prototype, \"touched\", void 0);\r\n    DxFileUploaderComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-file-uploader',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxFileUploaderComponent);\r\n    return DxFileUploaderComponent;\r\n}(DxComponent));\r\nvar DxFileUploaderModule = /** @class */ (function () {\r\n    function DxFileUploaderModule() {\r\n    }\r\n    DxFileUploaderModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxFileUploaderComponent\r\n            ],\r\n            exports: [\r\n                DxFileUploaderComponent,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxFileUploaderModule);\r\n    return DxFileUploaderModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxFileUploaderComponent, DxFileUploaderModule };\n"]}