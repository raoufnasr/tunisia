{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-core.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyLM;;;;;gDAGgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCA4GgB,AAI/B;;;;;;;;;;;;;;;oBAKqB;;;;;KAKvB;;;;;;;;;;gDAMoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqaL;;;;;;;;;;;;;;;;;;;2FAgBd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCA2FgC,AAE/B;;;;;;;;;;;;;kCAEqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAmEW,AAEhC;;;;;;gFACsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAoEiB,AAMvC;;;;;;;;;;;;;;;;;;kCAE6B","file":"devextreme-angular-core.js","sourcesContent":["import { __values, __decorate, __metadata, __extends, __param } from 'tslib';\nimport { EventEmitter, Injectable, TemplateRef, ViewContainerRef, Renderer2, NgZone, Input, Directive, NgModule, Inject, PLATFORM_ID, ElementRef, Optional, IterableDiffers } from '@angular/core';\nimport { isPlatformServer, DOCUMENT } from '@angular/common';\nimport { makeStateKey, TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { equalByValue } from 'devextreme/core/utils/common';\nimport { removeElement, inject as inject$1 } from 'devextreme/core/dom_adapter';\nimport { one, triggerHandler } from 'devextreme/events';\nimport render from 'devextreme/core/renderer';\nimport { XhrFactory } from '@angular/common/http';\nimport { inject as inject$2 } from 'devextreme/core/http_request';\nimport { inject, fire } from 'devextreme/core/utils/ready_callbacks';\nimport { set } from 'devextreme/events/core/events_engine';\nimport { inject as inject$3 } from 'devextreme/core/utils/ajax';\nimport { Deferred } from 'devextreme/core/utils/deferred';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n;\r\nvar DxTemplateHost = /** @class */ (function () {\r\n    function DxTemplateHost() {\r\n    }\r\n    DxTemplateHost.prototype.setHost = function (host) {\r\n        this.host = host;\r\n    };\r\n    DxTemplateHost.prototype.setTemplate = function (template) {\r\n        this.host.setTemplate(template);\r\n    };\r\n    return DxTemplateHost;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar NgEventsStrategy = /** @class */ (function () {\r\n    function NgEventsStrategy(instance) {\r\n        this.instance = instance;\r\n        this.subscriptions = {};\r\n        this.events = {};\r\n    }\r\n    NgEventsStrategy.prototype.hasEvent = function (name) {\r\n        return this.getEmitter(name).observers.length !== 0;\r\n    };\r\n    NgEventsStrategy.prototype.fireEvent = function (name, args) {\r\n        var emitter = this.getEmitter(name);\r\n        if (emitter.observers.length) {\r\n            emitter.next(args && args[0]);\r\n        }\r\n    };\r\n    NgEventsStrategy.prototype.on = function (name, handler) {\r\n        var eventSubscriptions = this.subscriptions[name] || [], subcription = this.getEmitter(name).subscribe(handler.bind(this.instance)), unsubscribe = subcription.unsubscribe.bind(subcription);\r\n        eventSubscriptions.push({ handler: handler, unsubscribe: unsubscribe });\r\n        this.subscriptions[name] = eventSubscriptions;\r\n    };\r\n    NgEventsStrategy.prototype.off = function (name, handler) {\r\n        var eventSubscriptions = this.subscriptions[name] || [];\r\n        if (handler) {\r\n            eventSubscriptions.some(function (subscription, i) {\r\n                if (subscription.handler === handler) {\r\n                    subscription.unsubscribe();\r\n                    eventSubscriptions.splice(i, 1);\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            eventSubscriptions.forEach(function (subscription) {\r\n                subscription.unsubscribe();\r\n            });\r\n            eventSubscriptions.splice(0, eventSubscriptions.length);\r\n        }\r\n    };\r\n    NgEventsStrategy.prototype.dispose = function () { };\r\n    NgEventsStrategy.prototype.addEmitter = function (eventName, emitter) {\r\n        this.events[eventName] = emitter;\r\n    };\r\n    NgEventsStrategy.prototype.getEmitter = function (eventName) {\r\n        if (!this.events[eventName]) {\r\n            this.events[eventName] = new EventEmitter();\r\n        }\r\n        return this.events[eventName];\r\n    };\r\n    return NgEventsStrategy;\r\n}());\r\nvar EmitterHelper = /** @class */ (function () {\r\n    function EmitterHelper(zone, component) {\r\n        this.zone = zone;\r\n        this.component = component;\r\n        this.lockedValueChangeEvent = false;\r\n    }\r\n    EmitterHelper.prototype.fireNgEvent = function (eventName, eventArgs) {\r\n        if (this.lockedValueChangeEvent && eventName === 'valueChange') {\r\n            return;\r\n        }\r\n        var emitter = this.component[eventName];\r\n        if (emitter && emitter.observers.length) {\r\n            this.zone.run(function () {\r\n                emitter.next(eventArgs && eventArgs[0]);\r\n            });\r\n        }\r\n    };\r\n    EmitterHelper.prototype.createEmitters = function (events) {\r\n        var _this = this;\r\n        events.forEach(function (event) {\r\n            _this.component[event.emit] = new EventEmitter();\r\n        });\r\n    };\r\n    return EmitterHelper;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar WatcherHelper = /** @class */ (function () {\r\n    function WatcherHelper() {\r\n        this._watchers = [];\r\n    }\r\n    WatcherHelper.prototype.getWatchMethod = function () {\r\n        var _this = this;\r\n        var watchMethod = function (valueGetter, valueChangeCallback, options) {\r\n            var oldValue = valueGetter();\r\n            options = options || {};\r\n            if (!options.skipImmediate) {\r\n                valueChangeCallback(oldValue);\r\n            }\r\n            var watcher = function () {\r\n                var newValue = valueGetter();\r\n                if (_this._isDifferentValues(oldValue, newValue, options.deep)) {\r\n                    valueChangeCallback(newValue);\r\n                    oldValue = newValue;\r\n                }\r\n            };\r\n            _this._watchers.push(watcher);\r\n            return function () {\r\n                var index = _this._watchers.indexOf(watcher);\r\n                if (index !== -1) {\r\n                    _this._watchers.splice(index, 1);\r\n                }\r\n            };\r\n        };\r\n        return watchMethod;\r\n    };\r\n    WatcherHelper.prototype._isDifferentValues = function (oldValue, newValue, deepCheck) {\r\n        var comparableNewValue = this._toComparable(newValue);\r\n        var comparableOldValue = this._toComparable(oldValue);\r\n        var isObjectValues = comparableNewValue instanceof Object && comparableOldValue instanceof Object;\r\n        if (deepCheck && isObjectValues) {\r\n            return this._checkObjectsFields(newValue, oldValue);\r\n        }\r\n        return comparableNewValue !== comparableOldValue;\r\n    };\r\n    WatcherHelper.prototype._toComparable = function (value) {\r\n        if (value instanceof Date) {\r\n            return value.getTime();\r\n        }\r\n        return value;\r\n    };\r\n    WatcherHelper.prototype._checkObjectsFields = function (checkingFromObject, checkingToObject) {\r\n        for (var field in checkingFromObject) {\r\n            var oldValue = this._toComparable(checkingFromObject[field]);\r\n            var newValue = this._toComparable(checkingToObject[field]);\r\n            var isEqualObjects = false;\r\n            if (typeof oldValue === 'object' && typeof newValue === 'object') {\r\n                isEqualObjects = equalByValue(oldValue, newValue);\r\n            }\r\n            if (oldValue !== newValue && !isEqualObjects) {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    WatcherHelper.prototype.checkWatchers = function () {\r\n        var e_1, _a;\r\n        try {\r\n            for (var _b = __values(this._watchers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var watcher = _c.value;\r\n                watcher();\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    };\r\n    WatcherHelper = __decorate([\r\n        Injectable()\r\n    ], WatcherHelper);\r\n    return WatcherHelper;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nfunction getElement(element) {\r\n    return element.get ? element.get(0) : element;\r\n}\r\n;\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar DX_TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';\r\nvar RenderData = /** @class */ (function () {\r\n    function RenderData() {\r\n    }\r\n    return RenderData;\r\n}());\r\nvar DxTemplateDirective = /** @class */ (function () {\r\n    function DxTemplateDirective(templateRef, viewContainerRef, templateHost, renderer, zone) {\r\n        this.templateRef = templateRef;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        templateHost.setTemplate(this);\r\n    }\r\n    Object.defineProperty(DxTemplateDirective.prototype, \"dxTemplateOf\", {\r\n        set: function (value) {\r\n            this.name = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ;\r\n    DxTemplateDirective.prototype.renderTemplate = function (renderData) {\r\n        var _this = this;\r\n        var childView = this.viewContainerRef.createEmbeddedView(this.templateRef, {\r\n            '$implicit': renderData.model,\r\n            index: renderData.index\r\n        });\r\n        var container = getElement(renderData.container);\r\n        if (renderData.container) {\r\n            childView.rootNodes.forEach(function (element) {\r\n                _this.renderer.appendChild(container, element);\r\n            });\r\n        }\r\n        return childView;\r\n    };\r\n    DxTemplateDirective.prototype.render = function (renderData) {\r\n        var _this = this;\r\n        var childView;\r\n        if (this.zone.isStable) {\r\n            childView = this.zone.run(function () {\r\n                return _this.renderTemplate(renderData);\r\n            });\r\n        }\r\n        else {\r\n            childView = this.renderTemplate(renderData);\r\n            // =========== WORKAROUND =============\r\n            // https://github.com/angular/angular/issues/12243\r\n            childView['detectChanges']();\r\n            // =========== /WORKAROUND =============\r\n        }\r\n        childView.rootNodes.forEach(function (element) {\r\n            if (element.nodeType === 1) {\r\n                _this.renderer.addClass(element, DX_TEMPLATE_WRAPPER_CLASS);\r\n            }\r\n            one(element, 'dxremove', function (_a, params) {\r\n                if (!params || !params._angularIntegration) {\r\n                    childView.destroy();\r\n                }\r\n            });\r\n        });\r\n        return childView.rootNodes;\r\n    };\r\n    DxTemplateDirective.ctorParameters = function () { return [\r\n        { type: TemplateRef },\r\n        { type: ViewContainerRef },\r\n        { type: DxTemplateHost },\r\n        { type: Renderer2 },\r\n        { type: NgZone }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTemplateDirective.prototype, \"dxTemplateOf\", null);\r\n    DxTemplateDirective = __decorate([\r\n        Directive({\r\n            selector: '[dxTemplate]'\r\n        }),\r\n        __metadata(\"design:paramtypes\", [TemplateRef,\r\n            ViewContainerRef,\r\n            DxTemplateHost,\r\n            Renderer2,\r\n            NgZone])\r\n    ], DxTemplateDirective);\r\n    return DxTemplateDirective;\r\n}());\r\nvar DxTemplateModule = /** @class */ (function () {\r\n    function DxTemplateModule() {\r\n    }\r\n    DxTemplateModule = __decorate([\r\n        NgModule({\r\n            declarations: [DxTemplateDirective],\r\n            exports: [DxTemplateDirective]\r\n        })\r\n    ], DxTemplateModule);\r\n    return DxTemplateModule;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar VISIBILITY_CHANGE_SELECTOR = 'dx-visibility-change-handler';\r\nvar BaseNestedOption = /** @class */ (function () {\r\n    function BaseNestedOption() {\r\n        this._initialOptions = {};\r\n        this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this), this._filterItems.bind(this));\r\n    }\r\n    BaseNestedOption.prototype._optionChangedHandler = function (e) {\r\n        var fullOptionPath = this._fullOptionPath();\r\n        if (e.fullName.indexOf(fullOptionPath) === 0) {\r\n            var optionName = e.fullName.slice(fullOptionPath.length);\r\n            var emitter = this[optionName + 'Change'];\r\n            if (emitter) {\r\n                emitter.next(e.value);\r\n            }\r\n        }\r\n    };\r\n    BaseNestedOption.prototype._createEventEmitters = function (events) {\r\n        var _this = this;\r\n        events.forEach(function (event) {\r\n            _this[event.emit] = new EventEmitter();\r\n        });\r\n    };\r\n    BaseNestedOption.prototype._getOption = function (name) {\r\n        if (this.isLinked) {\r\n            return this.instance.option(this._fullOptionPath() + name);\r\n        }\r\n        else {\r\n            return this._initialOptions[name];\r\n        }\r\n    };\r\n    BaseNestedOption.prototype._setOption = function (name, value) {\r\n        if (this.isLinked) {\r\n            this.instance.option(this._fullOptionPath() + name, value);\r\n        }\r\n        else {\r\n            this._initialOptions[name] = value;\r\n        }\r\n    };\r\n    BaseNestedOption.prototype._addRemovedOption = function (name) {\r\n        if (this.instance && this.removedOptions) {\r\n            this.removedOptions.push(name);\r\n        }\r\n    };\r\n    BaseNestedOption.prototype.setHost = function (host, optionPath) {\r\n        this._host = host;\r\n        this._hostOptionPath = optionPath;\r\n        this.optionChangedHandlers.subscribe(this._optionChangedHandler.bind(this));\r\n    };\r\n    BaseNestedOption.prototype.setChildren = function (propertyName, items) {\r\n        return this._collectionContainerImpl.setChildren(propertyName, items);\r\n    };\r\n    BaseNestedOption.prototype._filterItems = function (items) {\r\n        var _this = this;\r\n        return items.filter(function (item) { return item !== _this; });\r\n    };\r\n    Object.defineProperty(BaseNestedOption.prototype, \"instance\", {\r\n        get: function () {\r\n            return this._host && this._host.instance;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseNestedOption.prototype, \"removedOptions\", {\r\n        get: function () {\r\n            return this._host && this._host.removedOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseNestedOption.prototype, \"isLinked\", {\r\n        get: function () {\r\n            return !!this.instance && this._host.isLinked;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(BaseNestedOption.prototype, \"optionChangedHandlers\", {\r\n        get: function () {\r\n            return this._host && this._host.optionChangedHandlers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return BaseNestedOption;\r\n}());\r\nvar CollectionNestedOptionContainerImpl = /** @class */ (function () {\r\n    function CollectionNestedOptionContainerImpl(_setOption, _filterItems) {\r\n        this._setOption = _setOption;\r\n        this._filterItems = _filterItems;\r\n        this._activatedQueries = {};\r\n    }\r\n    CollectionNestedOptionContainerImpl.prototype.setChildren = function (propertyName, items) {\r\n        if (this._filterItems) {\r\n            items = this._filterItems(items);\r\n        }\r\n        if (items.length) {\r\n            this._activatedQueries[propertyName] = true;\r\n        }\r\n        if (this._activatedQueries[propertyName]) {\r\n            var widgetItems = items.map(function (item, index) {\r\n                item._index = index;\r\n                return item._value;\r\n            });\r\n            this._setOption(propertyName, widgetItems);\r\n        }\r\n    };\r\n    return CollectionNestedOptionContainerImpl;\r\n}());\r\nvar NestedOption = /** @class */ (function (_super) {\r\n    __extends(NestedOption, _super);\r\n    function NestedOption() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    NestedOption.prototype.setHost = function (host, optionPath) {\r\n        _super.prototype.setHost.call(this, host, optionPath);\r\n        this._host[this._optionPath] = this._initialOptions;\r\n    };\r\n    NestedOption.prototype._fullOptionPath = function () {\r\n        return this._hostOptionPath() + this._optionPath + '.';\r\n    };\r\n    return NestedOption;\r\n}(BaseNestedOption));\r\nvar CollectionNestedOption = /** @class */ (function (_super) {\r\n    __extends(CollectionNestedOption, _super);\r\n    function CollectionNestedOption() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CollectionNestedOption.prototype._fullOptionPath = function () {\r\n        return this._hostOptionPath() + this._optionPath + '[' + this._index + ']' + '.';\r\n    };\r\n    Object.defineProperty(CollectionNestedOption.prototype, \"_value\", {\r\n        get: function () {\r\n            return this._initialOptions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CollectionNestedOption.prototype, \"isLinked\", {\r\n        get: function () {\r\n            return this._index !== undefined && !!this.instance && this._host.isLinked;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return CollectionNestedOption;\r\n}(BaseNestedOption));\r\nvar triggerShownEvent = function (element) {\r\n    var changeHandlers = [];\r\n    if (!render(element).hasClass(VISIBILITY_CHANGE_SELECTOR)) {\r\n        changeHandlers.push(element);\r\n    }\r\n    changeHandlers.push.apply(changeHandlers, element.querySelectorAll('.' + VISIBILITY_CHANGE_SELECTOR));\r\n    for (var i = 0; i < changeHandlers.length; i++) {\r\n        triggerHandler(changeHandlers[i], 'dxshown');\r\n    }\r\n};\r\nvar ɵ0 = triggerShownEvent;\r\nfunction extractTemplate(option, element, renderer, document) {\r\n    if (!option.template === undefined || !element.nativeElement.hasChildNodes()) {\r\n        return;\r\n    }\r\n    var childNodes = [].slice.call(element.nativeElement.childNodes);\r\n    var userContent = childNodes.filter(function (n) {\r\n        if (n.tagName) {\r\n            var tagNamePrefix = n.tagName.toLowerCase().substr(0, 3);\r\n            return !(tagNamePrefix === 'dxi' || tagNamePrefix === 'dxo');\r\n        }\r\n        else {\r\n            return n.nodeName !== '#comment' && n.textContent.replace(/\\s/g, '').length;\r\n        }\r\n    });\r\n    if (!userContent.length) {\r\n        return;\r\n    }\r\n    option.template = {\r\n        render: function (renderData) {\r\n            var result = element.nativeElement;\r\n            renderer.addClass(result, DX_TEMPLATE_WRAPPER_CLASS);\r\n            if (renderData.container) {\r\n                var container = getElement(renderData.container);\r\n                var resultInContainer = container.contains(element.nativeElement);\r\n                renderer.appendChild(container, element.nativeElement);\r\n                if (!resultInContainer) {\r\n                    var resultInBody = document.body.contains(container);\r\n                    if (resultInBody) {\r\n                        triggerShownEvent(result);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n}\r\nvar NestedOptionHost = /** @class */ (function () {\r\n    function NestedOptionHost() {\r\n    }\r\n    NestedOptionHost.prototype.getHost = function () {\r\n        return this._host;\r\n    };\r\n    NestedOptionHost.prototype.setHost = function (host, optionPath) {\r\n        this._host = host;\r\n        this._optionPath = optionPath || (function () { return ''; });\r\n    };\r\n    NestedOptionHost.prototype.setNestedOption = function (nestedOption) {\r\n        nestedOption.setHost(this._host, this._optionPath);\r\n    };\r\n    return NestedOptionHost;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar serverStateKey;\r\nvar getServerStateKey = function () {\r\n    if (!serverStateKey) {\r\n        serverStateKey = makeStateKey('DX_isPlatformServer');\r\n    }\r\n    return serverStateKey;\r\n};\r\nvar DxComponent = /** @class */ (function () {\r\n    function DxComponent(element, ngZone, templateHost, watcherHelper, transferState, platformId) {\r\n        this.element = element;\r\n        this.watcherHelper = watcherHelper;\r\n        this.transferState = transferState;\r\n        this.platformId = platformId;\r\n        this._initialOptions = {};\r\n        this._optionsToUpdate = {};\r\n        this.optionChangedHandlers = new EventEmitter();\r\n        this.isLinked = true;\r\n        this.changedOptions = {};\r\n        this.removedOptions = [];\r\n        this.widgetUpdateLocked = false;\r\n        this.templates = [];\r\n        templateHost.setHost(this);\r\n        this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this));\r\n        this.eventHelper = new EmitterHelper(ngZone, this);\r\n    }\r\n    DxComponent.prototype._initTemplates = function () {\r\n        if (this.templates.length) {\r\n            var initialTemplates_1 = {};\r\n            this.templates.forEach(function (template) {\r\n                initialTemplates_1[template.name] = template;\r\n            });\r\n            this.instance.option('integrationOptions.templates', initialTemplates_1);\r\n        }\r\n    };\r\n    DxComponent.prototype._initEvents = function () {\r\n        var _this = this;\r\n        this.instance.on('optionChanged', function (e) {\r\n            _this.changedOptions[e.name] = e.value;\r\n            var value = e.name === e.fullName ? e.value : e.component.option(e.name);\r\n            _this.eventHelper.fireNgEvent(e.name + 'Change', [value]);\r\n            _this.optionChangedHandlers.emit(e);\r\n        });\r\n    };\r\n    DxComponent.prototype._initOptions = function () {\r\n        this._initialOptions.integrationOptions.watchMethod = this.watcherHelper.getWatchMethod();\r\n    };\r\n    DxComponent.prototype._initPlatform = function () {\r\n        if (this.transferState.hasKey(getServerStateKey())) {\r\n            this._initialOptions.integrationOptions.renderedOnServer = this.transferState.get(getServerStateKey(), null);\r\n        }\r\n        else if (isPlatformServer(this.platformId)) {\r\n            this.transferState.set(getServerStateKey(), true);\r\n        }\r\n    };\r\n    DxComponent.prototype._createEventEmitters = function (events) {\r\n        var _this = this;\r\n        this.eventHelper.createEmitters(events);\r\n        this._initialOptions.eventsStrategy = function (instance) {\r\n            var strategy = new NgEventsStrategy(instance);\r\n            events.filter(function (event) { return event.subscribe; }).forEach(function (event) {\r\n                strategy.addEmitter(event.subscribe, _this[event.emit]);\r\n            });\r\n            return strategy;\r\n        };\r\n        this._initialOptions.nestedComponentOptions = function (component) {\r\n            return {\r\n                eventsStrategy: function (instance) { return new NgEventsStrategy(instance); },\r\n                nestedComponentOptions: component.option('nestedComponentOptions')\r\n            };\r\n        };\r\n    };\r\n    DxComponent.prototype._shouldOptionChange = function (name, value) {\r\n        if (this.changedOptions.hasOwnProperty(name)) {\r\n            var prevValue = this.changedOptions[name];\r\n            delete this.changedOptions[name];\r\n            return value !== prevValue;\r\n        }\r\n        return true;\r\n    };\r\n    DxComponent.prototype.clearChangedOptions = function () {\r\n        this.changedOptions = {};\r\n    };\r\n    DxComponent.prototype._getOption = function (name) {\r\n        return this.instance ?\r\n            this.instance.option(name) :\r\n            this._initialOptions[name];\r\n    };\r\n    DxComponent.prototype.lockWidgetUpdate = function () {\r\n        if (!this.widgetUpdateLocked && this.instance) {\r\n            this.instance.beginUpdate();\r\n            this.widgetUpdateLocked = true;\r\n        }\r\n    };\r\n    DxComponent.prototype.unlockWidgetUpdate = function () {\r\n        if (this.widgetUpdateLocked) {\r\n            this.widgetUpdateLocked = false;\r\n            this.instance.endUpdate();\r\n        }\r\n    };\r\n    DxComponent.prototype._setOption = function (name, value) {\r\n        this.lockWidgetUpdate();\r\n        if (!this._shouldOptionChange(name, value)) {\r\n            return;\r\n        }\r\n        if (this.instance) {\r\n            this.instance.option(name, value);\r\n        }\r\n        else {\r\n            this._initialOptions[name] = value;\r\n        }\r\n    };\r\n    DxComponent.prototype._createWidget = function (element) {\r\n        this._initialOptions.integrationOptions = {};\r\n        this._initPlatform();\r\n        this._initOptions();\r\n        this._initialOptions.onInitializing = function () {\r\n            this.beginUpdate();\r\n        };\r\n        this.instance = this._createInstance(element, this._initialOptions);\r\n        this._initEvents();\r\n        this._initialOptions = {};\r\n    };\r\n    DxComponent.prototype._destroyWidget = function () {\r\n        this.removedOptions = [];\r\n        if (this.instance) {\r\n            var element = this.instance.element();\r\n            triggerHandler(element, 'dxremove', { _angularIntegration: true });\r\n            this.instance.dispose();\r\n            removeElement(element);\r\n        }\r\n    };\r\n    DxComponent.prototype.ngOnChanges = function (changes) {\r\n        for (var key in changes) {\r\n            var change = changes[key];\r\n            if (change.currentValue !== this[key]) {\r\n                this._optionsToUpdate[key] = changes[key].currentValue;\r\n            }\r\n        }\r\n    };\r\n    DxComponent.prototype.ngOnInit = function () {\r\n        this._createWidget(this.element.nativeElement);\r\n    };\r\n    DxComponent.prototype.ngDoCheck = function () {\r\n        this.applyOptions();\r\n    };\r\n    DxComponent.prototype.ngAfterContentChecked = function () {\r\n        this.applyOptions();\r\n        this.resetOptions();\r\n        this.unlockWidgetUpdate();\r\n    };\r\n    DxComponent.prototype.ngAfterViewInit = function () {\r\n        this._initTemplates();\r\n        this.instance.endUpdate();\r\n    };\r\n    DxComponent.prototype.applyOptions = function () {\r\n        if (Object.keys(this._optionsToUpdate).length) {\r\n            if (this.instance) {\r\n                this.instance.option(this._optionsToUpdate);\r\n            }\r\n            this._optionsToUpdate = {};\r\n        }\r\n    };\r\n    DxComponent.prototype.resetOptions = function () {\r\n        var _this = this;\r\n        if (this.instance) {\r\n            this.removedOptions.forEach(function (option) {\r\n                _this.instance.resetOption(option);\r\n            });\r\n            this.removedOptions = [];\r\n        }\r\n    };\r\n    DxComponent.prototype.setTemplate = function (template) {\r\n        this.templates.push(template);\r\n    };\r\n    DxComponent.prototype.setChildren = function (propertyName, items) {\r\n        return this._collectionContainerImpl.setChildren(propertyName, items);\r\n    };\r\n    DxComponent = __decorate([\r\n        __param(5, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef,\r\n            NgZone,\r\n            DxTemplateHost,\r\n            WatcherHelper,\r\n            TransferState, Object])\r\n    ], DxComponent);\r\n    return DxComponent;\r\n}());\r\nvar DxComponentExtension = /** @class */ (function (_super) {\r\n    __extends(DxComponentExtension, _super);\r\n    function DxComponentExtension() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DxComponentExtension.prototype.createInstance = function (element) {\r\n        this._createWidget(element);\r\n    };\r\n    DxComponentExtension.prototype.ngOnInit = function () {\r\n    };\r\n    DxComponentExtension.prototype.ngAfterViewInit = function () {\r\n        this._createWidget(this.element.nativeElement);\r\n        this.instance.endUpdate();\r\n    };\r\n    return DxComponentExtension;\r\n}(DxComponent));\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];\r\nvar insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];\r\nvar originalAdd;\r\nvar callbacks = [];\r\ninject({\r\n    add: function (callback) {\r\n        originalAdd = this.callBase.bind(this);\r\n        callbacks.push(callback);\r\n    }\r\n});\r\nvar doInjections = function (document, ngZone, xhrFactory) {\r\n    inject$1({\r\n        _document: document,\r\n        listen: function () {\r\n            var _this = this;\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var eventName = args[1];\r\n            if (outsideZoneEvents.indexOf(eventName) !== -1) {\r\n                return ngZone.runOutsideAngular(function () {\r\n                    return _this.callBase.apply(_this, args);\r\n                });\r\n            }\r\n            if (ngZone.isStable && insideZoneEvents.indexOf(eventName) !== -1) {\r\n                return ngZone.run(function () {\r\n                    return _this.callBase.apply(_this, args);\r\n                });\r\n            }\r\n            return this.callBase.apply(this, args);\r\n        },\r\n        isElementNode: function (element) {\r\n            return element && element.nodeType === 1;\r\n        },\r\n        isTextNode: function (element) {\r\n            return element && element.nodeType === 3;\r\n        },\r\n        isDocument: function (element) {\r\n            return element && element.nodeType === 9;\r\n        }\r\n    });\r\n    inject$2({\r\n        getXhr: function () {\r\n            if (!xhrFactory) {\r\n                return this.callBase.apply(this);\r\n            }\r\n            var _xhr = xhrFactory.build();\r\n            if (!('withCredentials' in _xhr)) {\r\n                _xhr['withCredentials'] = false;\r\n            }\r\n            return _xhr;\r\n        }\r\n    });\r\n    var runReadyCallbacksInZone = function () {\r\n        ngZone.run(function () {\r\n            set({});\r\n            callbacks.forEach(function (callback) { return originalAdd.call(null, callback); });\r\n            callbacks = [];\r\n            fire();\r\n        });\r\n    };\r\n    runReadyCallbacksInZone();\r\n    doInjections = runReadyCallbacksInZone;\r\n};\r\nvar ɵ0$1 = doInjections;\r\nvar DxIntegrationModule = /** @class */ (function () {\r\n    function DxIntegrationModule(document, ngZone, xhrFactory) {\r\n        doInjections(document, ngZone, xhrFactory);\r\n    }\r\n    DxIntegrationModule.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: NgZone },\r\n        { type: XhrFactory, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    DxIntegrationModule = __decorate([\r\n        NgModule({}),\r\n        __param(0, Inject(DOCUMENT)), __param(2, Optional()),\r\n        __metadata(\"design:paramtypes\", [Object, NgZone, XhrFactory])\r\n    ], DxIntegrationModule);\r\n    return DxIntegrationModule;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar IterableDifferHelper = /** @class */ (function () {\r\n    function IterableDifferHelper(_differs) {\r\n        this._differs = _differs;\r\n        this._propertyDiffers = {};\r\n    }\r\n    IterableDifferHelper.prototype.setHost = function (host) {\r\n        this._host = host;\r\n    };\r\n    IterableDifferHelper.prototype.setup = function (prop, changes) {\r\n        if (prop in changes) {\r\n            var value = changes[prop].currentValue;\r\n            this.setupSingle(prop, value);\r\n        }\r\n    };\r\n    IterableDifferHelper.prototype.setupSingle = function (prop, value) {\r\n        if (value && Array.isArray(value)) {\r\n            if (!this._propertyDiffers[prop]) {\r\n                try {\r\n                    this._propertyDiffers[prop] = this._differs.find(value).create(null);\r\n                    return true;\r\n                }\r\n                catch (e) { }\r\n            }\r\n        }\r\n        else {\r\n            delete this._propertyDiffers[prop];\r\n        }\r\n        return false;\r\n    };\r\n    IterableDifferHelper.prototype.getChanges = function (prop, value) {\r\n        if (this._propertyDiffers[prop]) {\r\n            return this._propertyDiffers[prop].diff(value);\r\n        }\r\n    };\r\n    IterableDifferHelper.prototype.checkChangedOptions = function (propName, hostValue) {\r\n        return this._host.changedOptions[propName] === hostValue;\r\n    };\r\n    ;\r\n    IterableDifferHelper.prototype.doCheck = function (prop) {\r\n        if (this._propertyDiffers[prop]) {\r\n            var hostValue = this._host[prop], isChangedOption = this.checkChangedOptions(prop, hostValue);\r\n            var changes = this.getChanges(prop, hostValue);\r\n            if (changes && this._host.instance && !isChangedOption) {\r\n                this._host.lockWidgetUpdate();\r\n                this._host.instance.option(prop, hostValue);\r\n            }\r\n        }\r\n    };\r\n    IterableDifferHelper.ctorParameters = function () { return [\r\n        { type: IterableDiffers }\r\n    ]; };\r\n    IterableDifferHelper = __decorate([\r\n        Injectable(),\r\n        __metadata(\"design:paramtypes\", [IterableDiffers])\r\n    ], IterableDifferHelper);\r\n    return IterableDifferHelper;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar DxServerTransferStateModule = /** @class */ (function () {\r\n    function DxServerTransferStateModule(state, platformId) {\r\n        this.state = state;\r\n        this.platformId = platformId;\r\n        var that = this;\r\n        inject$3({\r\n            sendRequest: function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var key = makeStateKey(that.generateKey(args)), cachedData = that.state.get(key, null);\r\n                if (isPlatformServer(that.platformId)) {\r\n                    var result = this.callBase.apply(this, args);\r\n                    result.always(function (data, status) {\r\n                        var dataForCache = {\r\n                            data: data,\r\n                            status: status\r\n                        };\r\n                        that.state.set(key, dataForCache);\r\n                    });\r\n                    return result;\r\n                }\r\n                else {\r\n                    if (cachedData) {\r\n                        var d = new Deferred();\r\n                        d.resolve(cachedData.data, cachedData.status);\r\n                        that.state.set(key, null);\r\n                        return d.promise();\r\n                    }\r\n                    return this.callBase.apply(this, args);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    DxServerTransferStateModule.prototype.generateKey = function (args) {\r\n        var keyValue = '';\r\n        for (var key in args) {\r\n            if (typeof args[key] === 'object') {\r\n                var objKey = this.generateKey(args[key]);\r\n                keyValue += key + objKey;\r\n            }\r\n            else {\r\n                keyValue += key + args[key];\r\n            }\r\n        }\r\n        return keyValue;\r\n    };\r\n    DxServerTransferStateModule.ctorParameters = function () { return [\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    DxServerTransferStateModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                BrowserTransferStateModule\r\n            ]\r\n        }),\r\n        __param(1, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [TransferState, Object])\r\n    ], DxServerTransferStateModule);\r\n    return DxServerTransferStateModule;\r\n}());\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BaseNestedOption, CollectionNestedOption, CollectionNestedOptionContainerImpl, DX_TEMPLATE_WRAPPER_CLASS, DxComponent, DxComponentExtension, DxIntegrationModule, DxServerTransferStateModule, DxTemplateDirective, DxTemplateHost, DxTemplateModule, EmitterHelper, IterableDifferHelper, NestedOption, NestedOptionHost, NgEventsStrategy, RenderData, WatcherHelper, extractTemplate, getElement, getServerStateKey, ɵ0$1 as ɵ0 };\n"]}