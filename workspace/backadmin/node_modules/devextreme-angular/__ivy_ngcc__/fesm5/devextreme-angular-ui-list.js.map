{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-list.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAukCA84CkC,AAW3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMiB;;;;;KAKnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8BgB","file":"devextreme-angular-ui-list.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxList from 'devextreme/ui/list';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiItemComponent, DxiMenuItemComponent, DxoItemDraggingModule, DxoCursorOffsetModule, DxiItemModule, DxiMenuItemModule, DxoSearchEditorOptionsModule, DxiButtonModule, DxoOptionsModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The List is a widget that represents a collection of items in a scrollable list.\r\n */\r\nvar DxListComponent = /** @class */ (function (_super) {\r\n    __extends(DxListComponent, _super);\r\n    function DxListComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'groupRendered', emit: 'onGroupRendered' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'itemClick', emit: 'onItemClick' },\r\n            { subscribe: 'itemContextMenu', emit: 'onItemContextMenu' },\r\n            { subscribe: 'itemDeleted', emit: 'onItemDeleted' },\r\n            { subscribe: 'itemDeleting', emit: 'onItemDeleting' },\r\n            { subscribe: 'itemHold', emit: 'onItemHold' },\r\n            { subscribe: 'itemRendered', emit: 'onItemRendered' },\r\n            { subscribe: 'itemReordered', emit: 'onItemReordered' },\r\n            { subscribe: 'itemSwipe', emit: 'onItemSwipe' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'pageLoading', emit: 'onPageLoading' },\r\n            { subscribe: 'pullRefresh', emit: 'onPullRefresh' },\r\n            { subscribe: 'scroll', emit: 'onScroll' },\r\n            { subscribe: 'selectAllValueChanged', emit: 'onSelectAllValueChanged' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'allowItemDeletingChange' },\r\n            { emit: 'allowItemReorderingChange' },\r\n            { emit: 'bounceEnabledChange' },\r\n            { emit: 'collapsibleGroupsChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'displayExprChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'groupedChange' },\r\n            { emit: 'groupTemplateChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'indicateLoadingChange' },\r\n            { emit: 'itemDeleteModeChange' },\r\n            { emit: 'itemDraggingChange' },\r\n            { emit: 'itemHoldTimeoutChange' },\r\n            { emit: 'itemsChange' },\r\n            { emit: 'itemTemplateChange' },\r\n            { emit: 'keyExprChange' },\r\n            { emit: 'menuItemsChange' },\r\n            { emit: 'menuModeChange' },\r\n            { emit: 'nextButtonTextChange' },\r\n            { emit: 'noDataTextChange' },\r\n            { emit: 'pageLoadingTextChange' },\r\n            { emit: 'pageLoadModeChange' },\r\n            { emit: 'pulledDownTextChange' },\r\n            { emit: 'pullingDownTextChange' },\r\n            { emit: 'pullRefreshEnabledChange' },\r\n            { emit: 'refreshingTextChange' },\r\n            { emit: 'repaintChangesOnlyChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollByContentChange' },\r\n            { emit: 'scrollByThumbChange' },\r\n            { emit: 'scrollingEnabledChange' },\r\n            { emit: 'searchEditorOptionsChange' },\r\n            { emit: 'searchEnabledChange' },\r\n            { emit: 'searchExprChange' },\r\n            { emit: 'searchModeChange' },\r\n            { emit: 'searchTimeoutChange' },\r\n            { emit: 'searchValueChange' },\r\n            { emit: 'selectAllModeChange' },\r\n            { emit: 'selectedItemKeysChange' },\r\n            { emit: 'selectedItemsChange' },\r\n            { emit: 'selectionModeChange' },\r\n            { emit: 'showScrollbarChange' },\r\n            { emit: 'showSelectionControlsChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'useNativeScrollingChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxListComponent.prototype, \"accessKey\", {\r\n        /**\r\n         * Specifies the shortcut key that sets focus on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"activeStateEnabled\", {\r\n        /**\r\n         * Specifies whether or not the widget changes its state when interacting with a user.\r\n         */\r\n        get: function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"allowItemDeleting\", {\r\n        /**\r\n         * Specifies whether or not an end user can delete list items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowItemDeleting');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowItemDeleting', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"allowItemReordering\", {\r\n        /**\r\n         * Use the itemDragging option instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allowItemReordering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allowItemReordering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"bounceEnabled\", {\r\n        /**\r\n         * A Boolean value specifying whether to enable or disable the bounce-back effect.\r\n         */\r\n        get: function () {\r\n            return this._getOption('bounceEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('bounceEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"collapsibleGroups\", {\r\n        /**\r\n         * Specifies whether or not an end-user can collapse groups.\r\n         */\r\n        get: function () {\r\n            return this._getOption('collapsibleGroups');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('collapsibleGroups', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Binds the widget to data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"displayExpr\", {\r\n        /**\r\n         * Specifies the data field whose values should be displayed. Defaults to \"text\" when the data source contains objects.\r\n         */\r\n        get: function () {\r\n            return this._getOption('displayExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('displayExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"focusStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget can be focused using keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"grouped\", {\r\n        /**\r\n         * Specifies whether data items should be grouped.\r\n         */\r\n        get: function () {\r\n            return this._getOption('grouped');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('grouped', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"groupTemplate\", {\r\n        /**\r\n         * Specifies a custom template for group captions.\r\n         */\r\n        get: function () {\r\n            return this._getOption('groupTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('groupTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"hoverStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget changes its state when a user pauses on it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"indicateLoading\", {\r\n        /**\r\n         * Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('indicateLoading');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('indicateLoading', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"itemDeleteMode\", {\r\n        /**\r\n         * Specifies the way a user can delete items from the list.\r\n         */\r\n        get: function () {\r\n            return this._getOption('itemDeleteMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('itemDeleteMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"itemDragging\", {\r\n        /**\r\n         * Configures item reordering using drag and drop gestures.\r\n         */\r\n        get: function () {\r\n            return this._getOption('itemDragging');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('itemDragging', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"itemHoldTimeout\", {\r\n        /**\r\n         * The time period in milliseconds before the onItemHold event is raised.\r\n         */\r\n        get: function () {\r\n            return this._getOption('itemHoldTimeout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('itemHoldTimeout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"items\", {\r\n        /**\r\n         * An array of items displayed by the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('items');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('items', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"itemTemplate\", {\r\n        /**\r\n         * Specifies a custom template for items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('itemTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('itemTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"keyExpr\", {\r\n        /**\r\n         * Specifies the key property that provides key values to access data items. Each key value must be unique.\r\n         */\r\n        get: function () {\r\n            return this._getOption('keyExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('keyExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"menuItems\", {\r\n        /**\r\n         * Specifies the array of items for a context menu called for a list item.\r\n         */\r\n        get: function () {\r\n            return this._getOption('menuItems');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('menuItems', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"menuMode\", {\r\n        /**\r\n         * Specifies whether an item context menu is shown when a user holds or swipes an item.\r\n         */\r\n        get: function () {\r\n            return this._getOption('menuMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('menuMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"nextButtonText\", {\r\n        /**\r\n         * The text displayed on the button used to load the next page from the data source.\r\n         */\r\n        get: function () {\r\n            return this._getOption('nextButtonText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('nextButtonText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"noDataText\", {\r\n        /**\r\n         * The text or HTML markup displayed by the widget if the item collection is empty.\r\n         */\r\n        get: function () {\r\n            return this._getOption('noDataText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('noDataText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"pageLoadingText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pageLoadingText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pageLoadingText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"pageLoadMode\", {\r\n        /**\r\n         * Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the \"next\" button is clicked.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pageLoadMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pageLoadMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"pulledDownText\", {\r\n        /**\r\n         * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pulledDownText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pulledDownText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"pullingDownText\", {\r\n        /**\r\n         * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pullingDownText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pullingDownText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"pullRefreshEnabled\", {\r\n        /**\r\n         * A Boolean value specifying whether or not the widget supports the \"pull down to refresh\" gesture.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pullRefreshEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pullRefreshEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"refreshingText\", {\r\n        /**\r\n         * Specifies the text displayed in the pullDown panel while the list is being refreshed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('refreshingText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('refreshingText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"repaintChangesOnly\", {\r\n        /**\r\n         * Specifies whether to repaint only those elements whose data changed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('repaintChangesOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('repaintChangesOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"scrollByContent\", {\r\n        /**\r\n         * A Boolean value specifying if the list is scrolled by content.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollByContent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollByContent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"scrollByThumb\", {\r\n        /**\r\n         * A Boolean value specifying if the list is scrolled using the scrollbar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollByThumb');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollByThumb', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"scrollingEnabled\", {\r\n        /**\r\n         * A Boolean value specifying whether to enable or disable list scrolling.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollingEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollingEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchEditorOptions\", {\r\n        /**\r\n         * Configures the search panel.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchEditorOptions');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchEditorOptions', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchEnabled\", {\r\n        /**\r\n         * Specifies whether the search panel is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchExpr\", {\r\n        /**\r\n         * Specifies a data object's field name or an expression whose value is compared to the search string.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchMode\", {\r\n        /**\r\n         * Specifies a comparison operation used to search widget items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchTimeout\", {\r\n        /**\r\n         * Specifies a delay in milliseconds between when a user finishes typing, and the search is executed.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchTimeout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchTimeout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"searchValue\", {\r\n        /**\r\n         * Specifies the current search string.\r\n         */\r\n        get: function () {\r\n            return this._getOption('searchValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('searchValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"selectAllMode\", {\r\n        /**\r\n         * Specifies the mode in which all items are selected.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectAllMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectAllMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"selectedItemKeys\", {\r\n        /**\r\n         * Specifies an array of currently selected item keys.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedItemKeys');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedItemKeys', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"selectedItems\", {\r\n        /**\r\n         * An array of currently selected item objects.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedItems');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedItems', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"selectionMode\", {\r\n        /**\r\n         * Specifies item selection mode.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"showScrollbar\", {\r\n        /**\r\n         * Specifies when the widget shows the scrollbar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showScrollbar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showScrollbar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"showSelectionControls\", {\r\n        /**\r\n         * Specifies whether or not to display controls used to select list items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showSelectionControls');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showSelectionControls', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"tabIndex\", {\r\n        /**\r\n         * Specifies the number of the element when the Tab key is used for navigating.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"useNativeScrolling\", {\r\n        /**\r\n         * Specifies whether or not the widget uses native scrolling.\r\n         */\r\n        get: function () {\r\n            return this._getOption('useNativeScrolling');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('useNativeScrolling', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"visible\", {\r\n        /**\r\n         * Specifies whether the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"itemsChildren\", {\r\n        get: function () {\r\n            return this._getOption('items');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('items', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxListComponent.prototype, \"menuItemsChildren\", {\r\n        get: function () {\r\n            return this._getOption('menuItems');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('menuItems', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxListComponent.prototype._createInstance = function (element, options) {\r\n        return new DxList(element, options);\r\n    };\r\n    DxListComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxListComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('items', changes);\r\n        this.setupChanges('menuItems', changes);\r\n        this.setupChanges('searchExpr', changes);\r\n        this.setupChanges('selectedItemKeys', changes);\r\n        this.setupChanges('selectedItems', changes);\r\n    };\r\n    DxListComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxListComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('items');\r\n        this._idh.doCheck('menuItems');\r\n        this._idh.doCheck('searchExpr');\r\n        this._idh.doCheck('selectedItemKeys');\r\n        this._idh.doCheck('selectedItems');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxListComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxListComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"accessKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"activeStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"allowItemDeleting\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"allowItemReordering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"bounceEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"collapsibleGroups\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"displayExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"focusStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"grouped\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"groupTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"hoverStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"indicateLoading\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"itemDeleteMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"itemDragging\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxListComponent.prototype, \"itemHoldTimeout\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxListComponent.prototype, \"items\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"itemTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"keyExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxListComponent.prototype, \"menuItems\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"menuMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"nextButtonText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"noDataText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"pageLoadingText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"pageLoadMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"pulledDownText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"pullingDownText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"pullRefreshEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"refreshingText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"repaintChangesOnly\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"scrollByContent\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"scrollByThumb\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"scrollingEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"searchEditorOptions\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"searchEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"searchExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"searchMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxListComponent.prototype, \"searchTimeout\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"searchValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"selectAllMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxListComponent.prototype, \"selectedItemKeys\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxListComponent.prototype, \"selectedItems\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"selectionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxListComponent.prototype, \"showScrollbar\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"showSelectionControls\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxListComponent.prototype, \"tabIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"useNativeScrolling\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxListComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onGroupRendered\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemContextMenu\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemDeleted\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemDeleting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemHold\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemRendered\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemReordered\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onItemSwipe\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onPageLoading\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onPullRefresh\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onScroll\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onSelectAllValueChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"onSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"accessKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"allowItemDeletingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"allowItemReorderingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"bounceEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"collapsibleGroupsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"displayExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"groupedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"groupTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"indicateLoadingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"itemDeleteModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"itemDraggingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"itemHoldTimeoutChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"itemsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"itemTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"keyExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"menuItemsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"menuModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"nextButtonTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"noDataTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"pageLoadingTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"pageLoadModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"pulledDownTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"pullingDownTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"pullRefreshEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"refreshingTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"repaintChangesOnlyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"scrollByContentChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"scrollByThumbChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"scrollingEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchEditorOptionsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchTimeoutChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"searchValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"selectAllModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"selectedItemKeysChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"selectedItemsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"selectionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"showScrollbarChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"showSelectionControlsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"tabIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"useNativeScrollingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxListComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiItemComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"itemsChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiMenuItemComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxListComponent.prototype, \"menuItemsChildren\", null);\r\n    DxListComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-list',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxListComponent);\r\n    return DxListComponent;\r\n}(DxComponent));\r\nvar DxListModule = /** @class */ (function () {\r\n    function DxListModule() {\r\n    }\r\n    DxListModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoItemDraggingModule,\r\n                DxoCursorOffsetModule,\r\n                DxiItemModule,\r\n                DxiMenuItemModule,\r\n                DxoSearchEditorOptionsModule,\r\n                DxiButtonModule,\r\n                DxoOptionsModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxListComponent\r\n            ],\r\n            exports: [\r\n                DxListComponent,\r\n                DxoItemDraggingModule,\r\n                DxoCursorOffsetModule,\r\n                DxiItemModule,\r\n                DxiMenuItemModule,\r\n                DxoSearchEditorOptionsModule,\r\n                DxiButtonModule,\r\n                DxoOptionsModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxListModule);\r\n    return DxListModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxListComponent, DxListModule };\n"]}