{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-tree-map.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCA4vBqC,AAY9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMoB;;;;;KAKtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkDmB","file":"devextreme-angular-ui-tree-map.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxTreeMap from 'devextreme/viz/tree_map';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoColorizerModule, DxoExportModule, DxoGroupModule, DxoBorderModule, DxoHoverStyleModule, DxoLabelModule, DxoFontModule, DxoSelectionStyleModule, DxoLoadingIndicatorModule, DxoSizeModule, DxoTileModule, DxoTitleModule, DxoMarginModule, DxoSubtitleModule, DxoTooltipModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The TreeMap is a widget that displays hierarchical data by using nested rectangles.\r\n */\r\nvar DxTreeMapComponent = /** @class */ (function (_super) {\r\n    __extends(DxTreeMapComponent, _super);\r\n    function DxTreeMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'click', emit: 'onClick' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'drill', emit: 'onDrill' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'hoverChanged', emit: 'onHoverChanged' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'nodesInitialized', emit: 'onNodesInitialized' },\r\n            { subscribe: 'nodesRendering', emit: 'onNodesRendering' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { emit: 'childrenFieldChange' },\r\n            { emit: 'colorFieldChange' },\r\n            { emit: 'colorizerChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'groupChange' },\r\n            { emit: 'hoverEnabledChange' },\r\n            { emit: 'idFieldChange' },\r\n            { emit: 'interactWithGroupChange' },\r\n            { emit: 'labelFieldChange' },\r\n            { emit: 'layoutAlgorithmChange' },\r\n            { emit: 'layoutDirectionChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'maxDepthChange' },\r\n            { emit: 'parentFieldChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'resolveLabelOverflowChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'selectionModeChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'tileChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'valueFieldChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"childrenField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('childrenField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('childrenField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"colorField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides colors for tiles.\r\n         */\r\n        get: function () {\r\n            return this._getOption('colorField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('colorField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"colorizer\", {\r\n        /**\r\n         * Manages the color settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('colorizer');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('colorizer', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Binds the widget to data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures the exporting and printing features.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"group\", {\r\n        /**\r\n         * Configures groups.\r\n         */\r\n        get: function () {\r\n            return this._getOption('group');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('group', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"hoverEnabled\", {\r\n        /**\r\n         * Specifies whether tiles and groups change their style when a user pauses on them.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"idField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('idField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('idField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"interactWithGroup\", {\r\n        /**\r\n         * Specifies whether the user will interact with a single tile or its group.\r\n         */\r\n        get: function () {\r\n            return this._getOption('interactWithGroup');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('interactWithGroup', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"labelField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides texts for tile and group labels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('labelField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('labelField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"layoutAlgorithm\", {\r\n        /**\r\n         * Specifies the layout algorithm.\r\n         */\r\n        get: function () {\r\n            return this._getOption('layoutAlgorithm');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('layoutAlgorithm', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"layoutDirection\", {\r\n        /**\r\n         * Specifies the direction in which the items will be laid out.\r\n         */\r\n        get: function () {\r\n            return this._getOption('layoutDirection');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('layoutDirection', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"loadingIndicator\", {\r\n        /**\r\n         * Configures the loading indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadingIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadingIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"maxDepth\", {\r\n        /**\r\n         * Specifies how many hierarchical levels must be visualized.\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxDepth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxDepth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"parentField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('parentField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('parentField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"redrawOnResize\", {\r\n        /**\r\n         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('redrawOnResize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('redrawOnResize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"resolveLabelOverflow\", {\r\n        /**\r\n         * Use the tile.label.textOverflow option instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resolveLabelOverflow');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resolveLabelOverflow', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"selectionMode\", {\r\n        /**\r\n         * Specifies whether a single or multiple nodes can be in the selected state simultaneously.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"tile\", {\r\n        /**\r\n         * Configures tiles.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tile');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tile', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"title\", {\r\n        /**\r\n         * Configures the widget's title.\r\n         */\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"tooltip\", {\r\n        /**\r\n         * Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tooltip');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tooltip', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTreeMapComponent.prototype, \"valueField\", {\r\n        /**\r\n         * Specifies the name of the data source field that provides values for tiles.\r\n         */\r\n        get: function () {\r\n            return this._getOption('valueField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('valueField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxTreeMapComponent.prototype._createInstance = function (element, options) {\r\n        return new DxTreeMap(element, options);\r\n    };\r\n    DxTreeMapComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxTreeMapComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('dataSource', changes);\r\n    };\r\n    DxTreeMapComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxTreeMapComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('dataSource');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxTreeMapComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxTreeMapComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"childrenField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"colorField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"colorizer\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"group\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"hoverEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"idField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"interactWithGroup\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"labelField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"layoutAlgorithm\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"layoutDirection\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"loadingIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxTreeMapComponent.prototype, \"maxDepth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"parentField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"redrawOnResize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"resolveLabelOverflow\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTreeMapComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"selectionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"tile\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"title\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTreeMapComponent.prototype, \"tooltip\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTreeMapComponent.prototype, \"valueField\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onDrill\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onHoverChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onNodesInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onNodesRendering\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"onSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"childrenFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"colorFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"colorizerChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"groupChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"hoverEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"idFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"interactWithGroupChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"labelFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"layoutAlgorithmChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"layoutDirectionChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"maxDepthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"parentFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"resolveLabelOverflowChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"selectionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"tileChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"titleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"tooltipChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTreeMapComponent.prototype, \"valueFieldChange\", void 0);\r\n    DxTreeMapComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-tree-map',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxTreeMapComponent);\r\n    return DxTreeMapComponent;\r\n}(DxComponent));\r\nvar DxTreeMapModule = /** @class */ (function () {\r\n    function DxTreeMapModule() {\r\n    }\r\n    DxTreeMapModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoColorizerModule,\r\n                DxoExportModule,\r\n                DxoGroupModule,\r\n                DxoBorderModule,\r\n                DxoHoverStyleModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxoSelectionStyleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoSizeModule,\r\n                DxoTileModule,\r\n                DxoTitleModule,\r\n                DxoMarginModule,\r\n                DxoSubtitleModule,\r\n                DxoTooltipModule,\r\n                DxoFormatModule,\r\n                DxoShadowModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxTreeMapComponent\r\n            ],\r\n            exports: [\r\n                DxTreeMapComponent,\r\n                DxoColorizerModule,\r\n                DxoExportModule,\r\n                DxoGroupModule,\r\n                DxoBorderModule,\r\n                DxoHoverStyleModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxoSelectionStyleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoSizeModule,\r\n                DxoTileModule,\r\n                DxoTitleModule,\r\n                DxoMarginModule,\r\n                DxoSubtitleModule,\r\n                DxoTooltipModule,\r\n                DxoFormatModule,\r\n                DxoShadowModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxTreeMapModule);\r\n    return DxTreeMapModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxTreeMapComponent, DxTreeMapModule };\n"]}