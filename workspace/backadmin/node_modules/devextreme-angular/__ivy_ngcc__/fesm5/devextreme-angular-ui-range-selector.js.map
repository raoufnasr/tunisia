{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-range-selector.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAousB2C,AAapC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAM0B;;;;;KAK5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA0JyB","file":"devextreme-angular-ui-range-selector.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { forwardRef, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, HostListener, Component, NgModule } from '@angular/core';\nimport DxRangeSelector from 'devextreme/viz/range_selector';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoBackgroundModule, DxoImageModule, DxoBehaviorModule, DxoChartModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoBorderModule, DxoHoverStyleModule, DxoHatchingModule, DxoLabelModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoFontModule, DxoFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoDataPrepareSettingsModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoValueAxisModule, DxoExportModule, DxoIndentModule, DxoLoadingIndicatorModule, DxoMarginModule, DxoScaleModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxoMarkerModule, DxoMaxRangeModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinRangeModule, DxoTickModule, DxoTickIntervalModule, DxoShutterModule, DxoSizeModule, DxoSliderHandleModule, DxoSliderMarkerModule, DxoTitleModule, DxoSubtitleModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nvar CUSTOM_VALUE_ACCESSOR_PROVIDER = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(function () { return DxRangeSelectorComponent; }),\r\n    multi: true\r\n};\r\n/**\r\n * The RangeSelector is a widget that allows a user to select a range of values on a scale.\r\n */\r\nvar DxRangeSelectorComponent = /** @class */ (function (_super) {\r\n    __extends(DxRangeSelectorComponent, _super);\r\n    function DxRangeSelectorComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this.touched = function (_) { };\r\n        _this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'valueChanged', emit: 'onValueChanged' },\r\n            { emit: 'backgroundChange' },\r\n            { emit: 'behaviorChange' },\r\n            { emit: 'chartChange' },\r\n            { emit: 'containerBackgroundColorChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'dataSourceFieldChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'indentChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scaleChange' },\r\n            { emit: 'selectedRangeColorChange' },\r\n            { emit: 'selectedRangeUpdateModeChange' },\r\n            { emit: 'shutterChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'sliderHandleChange' },\r\n            { emit: 'sliderMarkerChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'valueChange' },\r\n            { emit: 'onBlur' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"background\", {\r\n        /**\r\n         * Specifies the options for the range selector's background.\r\n         */\r\n        get: function () {\r\n            return this._getOption('background');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('background', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"behavior\", {\r\n        /**\r\n         * Specifies the RangeSelector's behavior options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('behavior');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('behavior', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"chart\", {\r\n        /**\r\n         * Specifies the options required to display a chart as the range selector's background.\r\n         */\r\n        get: function () {\r\n            return this._getOption('chart');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('chart', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"containerBackgroundColor\", {\r\n        /**\r\n         * Specifies the color of the parent page element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('containerBackgroundColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('containerBackgroundColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Specifies a data source for the scale values and for the chart at the background.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"dataSourceField\", {\r\n        /**\r\n         * Specifies the data source field that provides data for the scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSourceField');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSourceField', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures the exporting and printing features.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"indent\", {\r\n        /**\r\n         * Range selector's indent options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('indent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('indent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"loadingIndicator\", {\r\n        /**\r\n         * Configures the loading indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadingIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadingIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"margin\", {\r\n        /**\r\n         * Generates space around the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('margin');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('margin', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"redrawOnResize\", {\r\n        /**\r\n         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('redrawOnResize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('redrawOnResize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"scale\", {\r\n        /**\r\n         * Specifies options of the range selector's scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scale');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scale', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"selectedRangeColor\", {\r\n        /**\r\n         * Specifies the color of the selected range.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedRangeColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedRangeColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"selectedRangeUpdateMode\", {\r\n        /**\r\n         * Specifies how the selected range should behave when data is updated. Applies only when the RangeSelector is bound to a data source.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedRangeUpdateMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedRangeUpdateMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"shutter\", {\r\n        /**\r\n         * Specifies range selector shutter options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('shutter');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('shutter', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"sliderHandle\", {\r\n        /**\r\n         * Specifies the appearance of the range selector's slider handles.\r\n         */\r\n        get: function () {\r\n            return this._getOption('sliderHandle');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('sliderHandle', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"sliderMarker\", {\r\n        /**\r\n         * Defines the options of the range selector slider markers.\r\n         */\r\n        get: function () {\r\n            return this._getOption('sliderMarker');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('sliderMarker', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"title\", {\r\n        /**\r\n         * Configures the widget's title.\r\n         */\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxRangeSelectorComponent.prototype, \"value\", {\r\n        /**\r\n         * The selected range (initial or current). Equals the entire scale when not set.\r\n         */\r\n        get: function () {\r\n            return this._getOption('value');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('value', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxRangeSelectorComponent.prototype.change = function (_) { };\r\n    DxRangeSelectorComponent.prototype._createInstance = function (element, options) {\r\n        return new DxRangeSelector(element, options);\r\n    };\r\n    DxRangeSelectorComponent.prototype.writeValue = function (value) {\r\n        this.eventHelper.lockedValueChangeEvent = true;\r\n        this.value = value;\r\n        this.eventHelper.lockedValueChangeEvent = false;\r\n    };\r\n    DxRangeSelectorComponent.prototype.registerOnChange = function (fn) { this.change = fn; };\r\n    DxRangeSelectorComponent.prototype.registerOnTouched = function (fn) { this.touched = fn; };\r\n    DxRangeSelectorComponent.prototype._createWidget = function (element) {\r\n        var _this = this;\r\n        _super.prototype._createWidget.call(this, element);\r\n        this.instance.on('focusOut', function (e) {\r\n            _this.eventHelper.fireNgEvent('onBlur', [e]);\r\n        });\r\n    };\r\n    DxRangeSelectorComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxRangeSelectorComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('value', changes);\r\n    };\r\n    DxRangeSelectorComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxRangeSelectorComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('value');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxRangeSelectorComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxRangeSelectorComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"background\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"behavior\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"chart\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxRangeSelectorComponent.prototype, \"containerBackgroundColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxRangeSelectorComponent.prototype, \"dataSourceField\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxRangeSelectorComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"indent\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"loadingIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"margin\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxRangeSelectorComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxRangeSelectorComponent.prototype, \"redrawOnResize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxRangeSelectorComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"scale\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxRangeSelectorComponent.prototype, \"selectedRangeColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"shutter\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"sliderHandle\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"sliderMarker\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxRangeSelectorComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"title\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxRangeSelectorComponent.prototype, \"value\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onValueChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"backgroundChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"behaviorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"chartChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"containerBackgroundColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"dataSourceFieldChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"indentChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"marginChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"scaleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"selectedRangeColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"selectedRangeUpdateModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"shutterChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"sliderHandleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"sliderMarkerChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"titleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"valueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxRangeSelectorComponent.prototype, \"onBlur\", void 0);\r\n    __decorate([\r\n        HostListener('valueChange', ['$event']),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Object]),\r\n        __metadata(\"design:returntype\", void 0)\r\n    ], DxRangeSelectorComponent.prototype, \"change\", null);\r\n    __decorate([\r\n        HostListener('onBlur', ['$event']),\r\n        __metadata(\"design:type\", Object)\r\n    ], DxRangeSelectorComponent.prototype, \"touched\", void 0);\r\n    DxRangeSelectorComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-range-selector',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                CUSTOM_VALUE_ACCESSOR_PROVIDER,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxRangeSelectorComponent);\r\n    return DxRangeSelectorComponent;\r\n}(DxComponent));\r\nvar DxRangeSelectorModule = /** @class */ (function () {\r\n    function DxRangeSelectorModule() {\r\n    }\r\n    DxRangeSelectorModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoBackgroundModule,\r\n                DxoImageModule,\r\n                DxoBehaviorModule,\r\n                DxoChartModule,\r\n                DxoCommonSeriesSettingsModule,\r\n                DxoAggregationModule,\r\n                DxoAreaModule,\r\n                DxoBorderModule,\r\n                DxoHoverStyleModule,\r\n                DxoHatchingModule,\r\n                DxoLabelModule,\r\n                DxoConnectorModule,\r\n                DxoPointModule,\r\n                DxoHeightModule,\r\n                DxoUrlModule,\r\n                DxoWidthModule,\r\n                DxoSelectionStyleModule,\r\n                DxoReductionModule,\r\n                DxoValueErrorBarModule,\r\n                DxoBarModule,\r\n                DxoBubbleModule,\r\n                DxoCandlestickModule,\r\n                DxoFullstackedareaModule,\r\n                DxoFullstackedbarModule,\r\n                DxoFullstackedlineModule,\r\n                DxoFullstackedsplineModule,\r\n                DxoFullstackedsplineareaModule,\r\n                DxoArgumentFormatModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoLineModule,\r\n                DxoRangeareaModule,\r\n                DxoRangebarModule,\r\n                DxoScatterModule,\r\n                DxoSplineModule,\r\n                DxoSplineareaModule,\r\n                DxoStackedareaModule,\r\n                DxoStackedbarModule,\r\n                DxoStackedlineModule,\r\n                DxoStackedsplineModule,\r\n                DxoStackedsplineareaModule,\r\n                DxoStepareaModule,\r\n                DxoSteplineModule,\r\n                DxoStockModule,\r\n                DxoDataPrepareSettingsModule,\r\n                DxiSeriesModule,\r\n                DxoSeriesTemplateModule,\r\n                DxoValueAxisModule,\r\n                DxoExportModule,\r\n                DxoIndentModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoMarginModule,\r\n                DxoScaleModule,\r\n                DxoAggregationIntervalModule,\r\n                DxiBreakModule,\r\n                DxoBreakStyleModule,\r\n                DxoMarkerModule,\r\n                DxoMaxRangeModule,\r\n                DxoMinorTickModule,\r\n                DxoMinorTickIntervalModule,\r\n                DxoMinRangeModule,\r\n                DxoTickModule,\r\n                DxoTickIntervalModule,\r\n                DxoShutterModule,\r\n                DxoSizeModule,\r\n                DxoSliderHandleModule,\r\n                DxoSliderMarkerModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxRangeSelectorComponent\r\n            ],\r\n            exports: [\r\n                DxRangeSelectorComponent,\r\n                DxoBackgroundModule,\r\n                DxoImageModule,\r\n                DxoBehaviorModule,\r\n                DxoChartModule,\r\n                DxoCommonSeriesSettingsModule,\r\n                DxoAggregationModule,\r\n                DxoAreaModule,\r\n                DxoBorderModule,\r\n                DxoHoverStyleModule,\r\n                DxoHatchingModule,\r\n                DxoLabelModule,\r\n                DxoConnectorModule,\r\n                DxoPointModule,\r\n                DxoHeightModule,\r\n                DxoUrlModule,\r\n                DxoWidthModule,\r\n                DxoSelectionStyleModule,\r\n                DxoReductionModule,\r\n                DxoValueErrorBarModule,\r\n                DxoBarModule,\r\n                DxoBubbleModule,\r\n                DxoCandlestickModule,\r\n                DxoFullstackedareaModule,\r\n                DxoFullstackedbarModule,\r\n                DxoFullstackedlineModule,\r\n                DxoFullstackedsplineModule,\r\n                DxoFullstackedsplineareaModule,\r\n                DxoArgumentFormatModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoLineModule,\r\n                DxoRangeareaModule,\r\n                DxoRangebarModule,\r\n                DxoScatterModule,\r\n                DxoSplineModule,\r\n                DxoSplineareaModule,\r\n                DxoStackedareaModule,\r\n                DxoStackedbarModule,\r\n                DxoStackedlineModule,\r\n                DxoStackedsplineModule,\r\n                DxoStackedsplineareaModule,\r\n                DxoStepareaModule,\r\n                DxoSteplineModule,\r\n                DxoStockModule,\r\n                DxoDataPrepareSettingsModule,\r\n                DxiSeriesModule,\r\n                DxoSeriesTemplateModule,\r\n                DxoValueAxisModule,\r\n                DxoExportModule,\r\n                DxoIndentModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoMarginModule,\r\n                DxoScaleModule,\r\n                DxoAggregationIntervalModule,\r\n                DxiBreakModule,\r\n                DxoBreakStyleModule,\r\n                DxoMarkerModule,\r\n                DxoMaxRangeModule,\r\n                DxoMinorTickModule,\r\n                DxoMinorTickIntervalModule,\r\n                DxoMinRangeModule,\r\n                DxoTickModule,\r\n                DxoTickIntervalModule,\r\n                DxoShutterModule,\r\n                DxoSizeModule,\r\n                DxoSliderHandleModule,\r\n                DxoSliderMarkerModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxRangeSelectorModule);\r\n    return DxRangeSelectorModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxRangeSelectorComponent, DxRangeSelectorModule };\n"]}