{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-bullet.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAidoC,AAW7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKmB;;;;;KAKrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8BkB","file":"devextreme-angular-ui-bullet.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxBullet from 'devextreme/viz/bullet';\nimport { DxTemplateHost, WatcherHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoMarginModule, DxoSizeModule, DxoTooltipModule, DxoBorderModule, DxoFontModule, DxoFormatModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Bullet widget is useful when you need to compare a single measure to a target value. The widget comprises a horizontal bar indicating the measure and a vertical line indicating the target value.\r\n */\r\nvar DxBulletComponent = /** @class */ (function (_super) {\r\n    __extends(DxBulletComponent, _super);\r\n    function DxBulletComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'colorChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'endScaleValueChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showTargetChange' },\r\n            { emit: 'showZeroLevelChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'startScaleValueChange' },\r\n            { emit: 'targetChange' },\r\n            { emit: 'targetColorChange' },\r\n            { emit: 'targetWidthChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'valueChange' }\r\n        ]);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxBulletComponent.prototype, \"color\", {\r\n        /**\r\n         * Specifies a color for the bullet bar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('color');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('color', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"endScaleValue\", {\r\n        /**\r\n         * Specifies an end value for the invisible scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('endScaleValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('endScaleValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"margin\", {\r\n        /**\r\n         * Generates space around the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('margin');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('margin', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"showTarget\", {\r\n        /**\r\n         * Specifies whether or not to show the target line.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showTarget');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showTarget', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"showZeroLevel\", {\r\n        /**\r\n         * Specifies whether or not to show the line indicating zero on the invisible scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showZeroLevel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showZeroLevel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"startScaleValue\", {\r\n        /**\r\n         * Specifies a start value for the invisible scale.\r\n         */\r\n        get: function () {\r\n            return this._getOption('startScaleValue');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('startScaleValue', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"target\", {\r\n        /**\r\n         * Specifies the value indicated by the target line.\r\n         */\r\n        get: function () {\r\n            return this._getOption('target');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('target', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"targetColor\", {\r\n        /**\r\n         * Specifies a color for both the target and zero level lines.\r\n         */\r\n        get: function () {\r\n            return this._getOption('targetColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('targetColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"targetWidth\", {\r\n        /**\r\n         * Specifies the width of the target line.\r\n         */\r\n        get: function () {\r\n            return this._getOption('targetWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('targetWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"tooltip\", {\r\n        /**\r\n         * Configures the tooltip.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tooltip');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tooltip', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxBulletComponent.prototype, \"value\", {\r\n        /**\r\n         * Specifies the primary value indicated by the bullet bar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('value');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('value', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxBulletComponent.prototype._createInstance = function (element, options) {\r\n        return new DxBullet(element, options);\r\n    };\r\n    DxBulletComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxBulletComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBulletComponent.prototype, \"color\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBulletComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBulletComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBulletComponent.prototype, \"endScaleValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBulletComponent.prototype, \"margin\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBulletComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBulletComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBulletComponent.prototype, \"showTarget\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxBulletComponent.prototype, \"showZeroLevel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBulletComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBulletComponent.prototype, \"startScaleValue\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBulletComponent.prototype, \"target\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBulletComponent.prototype, \"targetColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBulletComponent.prototype, \"targetWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxBulletComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxBulletComponent.prototype, \"tooltip\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxBulletComponent.prototype, \"value\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onTooltipHidden\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"onTooltipShown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"colorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"endScaleValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"marginChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"showTargetChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"showZeroLevelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"startScaleValueChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"targetChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"targetColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"targetWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"tooltipChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxBulletComponent.prototype, \"valueChange\", void 0);\r\n    DxBulletComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-bullet',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(6, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxBulletComponent);\r\n    return DxBulletComponent;\r\n}(DxComponent));\r\nvar DxBulletModule = /** @class */ (function () {\r\n    function DxBulletModule() {\r\n    }\r\n    DxBulletModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoMarginModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoBorderModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoShadowModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxBulletComponent\r\n            ],\r\n            exports: [\r\n                DxBulletComponent,\r\n                DxoMarginModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoBorderModule,\r\n                DxoFontModule,\r\n                DxoFormatModule,\r\n                DxoShadowModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxBulletModule);\r\n    return DxBulletModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxBulletComponent, DxBulletModule };\n"]}