{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-tooltip.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsqCAilBqC,AAU9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKoB;;;;;KAKtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAsCmB","file":"devextreme-angular-ui-tooltip.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, Component, NgModule } from '@angular/core';\nimport DxTooltip from 'devextreme/ui/tooltip';\nimport { DxTemplateHost, WatcherHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxoAnimationModule, DxoHideModule, DxoShowModule, DxoHideEventModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxoShowEventModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Tooltip widget displays a tooltip for a specified element on the page.\r\n */\r\nvar DxTooltipComponent = /** @class */ (function (_super) {\r\n    __extends(DxTooltipComponent, _super);\r\n    function DxTooltipComponent(elementRef, ngZone, templateHost, _watcherHelper, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'hidden', emit: 'onHidden' },\r\n            { subscribe: 'hiding', emit: 'onHiding' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'showing', emit: 'onShowing' },\r\n            { subscribe: 'shown', emit: 'onShown' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'closeOnOutsideClickChange' },\r\n            { emit: 'containerChange' },\r\n            { emit: 'contentTemplateChange' },\r\n            { emit: 'deferRenderingChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hideEventChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'maxHeightChange' },\r\n            { emit: 'maxWidthChange' },\r\n            { emit: 'minHeightChange' },\r\n            { emit: 'minWidthChange' },\r\n            { emit: 'positionChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'shadingChange' },\r\n            { emit: 'shadingColorChange' },\r\n            { emit: 'showEventChange' },\r\n            { emit: 'targetChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"animation\", {\r\n        /**\r\n         * Configures widget visibility animations. This object contains two fields: show and hide.\r\n         */\r\n        get: function () {\r\n            return this._getOption('animation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('animation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"closeOnOutsideClick\", {\r\n        /**\r\n         * A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('closeOnOutsideClick');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('closeOnOutsideClick', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"container\", {\r\n        /**\r\n         * Specifies the container in which to place the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('container');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('container', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"contentTemplate\", {\r\n        /**\r\n         * Specifies a custom template for the widget content.\r\n         */\r\n        get: function () {\r\n            return this._getOption('contentTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('contentTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"deferRendering\", {\r\n        /**\r\n         * Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately.\r\n         */\r\n        get: function () {\r\n            return this._getOption('deferRendering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('deferRendering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"hideEvent\", {\r\n        /**\r\n         * Specifies options of popover hiding.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hideEvent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hideEvent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"hoverStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget changes its state when a user pauses on it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"maxHeight\", {\r\n        /**\r\n         * Specifies the maximum height the widget can reach while resizing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxHeight');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxHeight', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"maxWidth\", {\r\n        /**\r\n         * Specifies the maximum width the widget can reach while resizing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"minHeight\", {\r\n        /**\r\n         * Specifies the minimum height the widget can reach while resizing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('minHeight');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('minHeight', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"minWidth\", {\r\n        /**\r\n         * Specifies the minimum width the widget can reach while resizing.\r\n         */\r\n        get: function () {\r\n            return this._getOption('minWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('minWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"position\", {\r\n        /**\r\n         * An object defining widget positioning options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('position');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('position', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"shading\", {\r\n        /**\r\n         * Specifies whether to shade the background when the widget is active.\r\n         */\r\n        get: function () {\r\n            return this._getOption('shading');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('shading', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"shadingColor\", {\r\n        /**\r\n         * Specifies the shading color.\r\n         */\r\n        get: function () {\r\n            return this._getOption('shadingColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('shadingColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"showEvent\", {\r\n        /**\r\n         * Specifies options for displaying the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showEvent');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showEvent', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"target\", {\r\n        /**\r\n         * The target element associated with the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('target');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('target', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"visible\", {\r\n        /**\r\n         * A Boolean value specifying whether or not the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxTooltipComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxTooltipComponent.prototype._createInstance = function (element, options) {\r\n        return new DxTooltip(element, options);\r\n    };\r\n    DxTooltipComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxTooltipComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"animation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"closeOnOutsideClick\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"container\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"contentTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"deferRendering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"hideEvent\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTooltipComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"hoverStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"maxHeight\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"maxWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"minHeight\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"minWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"position\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"shading\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxTooltipComponent.prototype, \"shadingColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"showEvent\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"target\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxTooltipComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxTooltipComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onHidden\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onHiding\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onShowing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"onShown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"animationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"closeOnOutsideClickChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"containerChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"contentTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"deferRenderingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"hideEventChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"maxHeightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"maxWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"minHeightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"minWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"positionChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"shadingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"shadingColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"showEventChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"targetChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxTooltipComponent.prototype, \"widthChange\", void 0);\r\n    DxTooltipComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-tooltip',\r\n            template: '<ng-content></ng-content>',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost\r\n            ]\r\n        }),\r\n        __param(6, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxTooltipComponent);\r\n    return DxTooltipComponent;\r\n}(DxComponent));\r\nvar DxTooltipModule = /** @class */ (function () {\r\n    function DxTooltipModule() {\r\n    }\r\n    DxTooltipModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoAnimationModule,\r\n                DxoHideModule,\r\n                DxoShowModule,\r\n                DxoHideEventModule,\r\n                DxoPositionModule,\r\n                DxoAtModule,\r\n                DxoBoundaryOffsetModule,\r\n                DxoCollisionModule,\r\n                DxoMyModule,\r\n                DxoOffsetModule,\r\n                DxoShowEventModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxTooltipComponent\r\n            ],\r\n            exports: [\r\n                DxTooltipComponent,\r\n                DxoAnimationModule,\r\n                DxoHideModule,\r\n                DxoShowModule,\r\n                DxoHideEventModule,\r\n                DxoPositionModule,\r\n                DxoAtModule,\r\n                DxoBoundaryOffsetModule,\r\n                DxoCollisionModule,\r\n                DxoMyModule,\r\n                DxoOffsetModule,\r\n                DxoShowEventModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxTooltipModule);\r\n    return DxTooltipModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxTooltipComponent, DxTooltipModule };\n"]}