{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-vector-map.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsuCAosBuC,AAYhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMsB;;;;;KAKxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAkDqB","file":"devextreme-angular-ui-vector-map.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxVectorMap from 'devextreme/viz/vector_map';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiLayerComponent, DxiLegendComponent, DxoBackgroundModule, DxoControlBarModule, DxoExportModule, DxiLayerModule, DxoLabelModule, DxoFontModule, DxiLegendModule, DxoBorderModule, DxoMarginModule, DxoSourceModule, DxoTitleModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxoProjectionModule, DxoSizeModule, DxoTooltipModule, DxoShadowModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The VectorMap is a widget that visualizes geographical locations. This widget represents a geographical map that contains areas and markers. Areas embody continents and countries. Markers flag specific points on the map, for example, towns, cities or capitals.\r\n */\r\nvar DxVectorMapComponent = /** @class */ (function (_super) {\r\n    __extends(DxVectorMapComponent, _super);\r\n    function DxVectorMapComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'centerChanged', emit: 'onCenterChanged' },\r\n            { subscribe: 'click', emit: 'onClick' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { subscribe: 'zoomFactorChanged', emit: 'onZoomFactorChanged' },\r\n            { emit: 'backgroundChange' },\r\n            { emit: 'boundsChange' },\r\n            { emit: 'centerChange' },\r\n            { emit: 'controlBarChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'layersChange' },\r\n            { emit: 'legendsChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'maxZoomFactorChange' },\r\n            { emit: 'panningEnabledChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'projectionChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'touchEnabledChange' },\r\n            { emit: 'wheelEnabledChange' },\r\n            { emit: 'zoomFactorChange' },\r\n            { emit: 'zoomingEnabledChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"background\", {\r\n        /**\r\n         * Specifies the options for the map background.\r\n         */\r\n        get: function () {\r\n            return this._getOption('background');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('background', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"bounds\", {\r\n        /**\r\n         * Specifies the positioning of a map in geographical coordinates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('bounds');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('bounds', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"center\", {\r\n        /**\r\n         * Specifies the geographical coordinates of the center for a map.\r\n         */\r\n        get: function () {\r\n            return this._getOption('center');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('center', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"controlBar\", {\r\n        /**\r\n         * Configures the control bar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('controlBar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('controlBar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures the exporting and printing features.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"layers\", {\r\n        /**\r\n         * Specifies options for VectorMap widget layers.\r\n         */\r\n        get: function () {\r\n            return this._getOption('layers');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('layers', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"legends\", {\r\n        /**\r\n         * Configures map legends.\r\n         */\r\n        get: function () {\r\n            return this._getOption('legends');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('legends', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"loadingIndicator\", {\r\n        /**\r\n         * Configures the loading indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadingIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadingIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"maxZoomFactor\", {\r\n        /**\r\n         * Specifies a map's maximum zoom factor.\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxZoomFactor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxZoomFactor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"panningEnabled\", {\r\n        /**\r\n         * Disables the panning capability.\r\n         */\r\n        get: function () {\r\n            return this._getOption('panningEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('panningEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"projection\", {\r\n        /**\r\n         * Specifies the map projection.\r\n         */\r\n        get: function () {\r\n            return this._getOption('projection');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('projection', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"redrawOnResize\", {\r\n        /**\r\n         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('redrawOnResize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('redrawOnResize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"title\", {\r\n        /**\r\n         * Configures the widget's title.\r\n         */\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"tooltip\", {\r\n        /**\r\n         * Configures tooltips.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tooltip');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tooltip', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"touchEnabled\", {\r\n        /**\r\n         * Specifies whether the map should respond to touch gestures.\r\n         */\r\n        get: function () {\r\n            return this._getOption('touchEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('touchEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"wheelEnabled\", {\r\n        /**\r\n         * Specifies whether or not the map should respond when a user rolls the mouse wheel.\r\n         */\r\n        get: function () {\r\n            return this._getOption('wheelEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('wheelEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"zoomFactor\", {\r\n        /**\r\n         * Specifies a number that is used to zoom a map initially.\r\n         */\r\n        get: function () {\r\n            return this._getOption('zoomFactor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('zoomFactor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"zoomingEnabled\", {\r\n        /**\r\n         * Disables the zooming capability.\r\n         */\r\n        get: function () {\r\n            return this._getOption('zoomingEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('zoomingEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"layersChildren\", {\r\n        get: function () {\r\n            return this._getOption('layers');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('layers', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxVectorMapComponent.prototype, \"legendsChildren\", {\r\n        get: function () {\r\n            return this._getOption('legends');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('legends', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxVectorMapComponent.prototype._createInstance = function (element, options) {\r\n        return new DxVectorMap(element, options);\r\n    };\r\n    DxVectorMapComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxVectorMapComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('bounds', changes);\r\n        this.setupChanges('center', changes);\r\n        this.setupChanges('layers', changes);\r\n        this.setupChanges('legends', changes);\r\n    };\r\n    DxVectorMapComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxVectorMapComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('bounds');\r\n        this._idh.doCheck('center');\r\n        this._idh.doCheck('layers');\r\n        this._idh.doCheck('legends');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxVectorMapComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxVectorMapComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"background\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxVectorMapComponent.prototype, \"bounds\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxVectorMapComponent.prototype, \"center\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"controlBar\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxVectorMapComponent.prototype, \"layers\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxVectorMapComponent.prototype, \"legends\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"loadingIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxVectorMapComponent.prototype, \"maxZoomFactor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"panningEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"projection\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"redrawOnResize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxVectorMapComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"title\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"tooltip\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"touchEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"wheelEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxVectorMapComponent.prototype, \"zoomFactor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxVectorMapComponent.prototype, \"zoomingEnabled\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onCenterChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onTooltipHidden\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onTooltipShown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"onZoomFactorChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"backgroundChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"boundsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"centerChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"controlBarChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"layersChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"legendsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"maxZoomFactorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"panningEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"projectionChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"titleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"tooltipChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"touchEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"wheelEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"zoomFactorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxVectorMapComponent.prototype, \"zoomingEnabledChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiLayerComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"layersChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiLegendComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxVectorMapComponent.prototype, \"legendsChildren\", null);\r\n    DxVectorMapComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-vector-map',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxVectorMapComponent);\r\n    return DxVectorMapComponent;\r\n}(DxComponent));\r\nvar DxVectorMapModule = /** @class */ (function () {\r\n    function DxVectorMapModule() {\r\n    }\r\n    DxVectorMapModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoBackgroundModule,\r\n                DxoControlBarModule,\r\n                DxoExportModule,\r\n                DxiLayerModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxiLegendModule,\r\n                DxoBorderModule,\r\n                DxoMarginModule,\r\n                DxoSourceModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoProjectionModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoShadowModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxVectorMapComponent\r\n            ],\r\n            exports: [\r\n                DxVectorMapComponent,\r\n                DxoBackgroundModule,\r\n                DxoControlBarModule,\r\n                DxoExportModule,\r\n                DxiLayerModule,\r\n                DxoLabelModule,\r\n                DxoFontModule,\r\n                DxiLegendModule,\r\n                DxoBorderModule,\r\n                DxoMarginModule,\r\n                DxoSourceModule,\r\n                DxoTitleModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxoProjectionModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxoShadowModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxVectorMapModule);\r\n    return DxVectorMapModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxVectorMapComponent, DxVectorMapModule };\n"]}