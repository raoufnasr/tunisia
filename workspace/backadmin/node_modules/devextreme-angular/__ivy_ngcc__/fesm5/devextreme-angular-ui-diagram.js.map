{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-diagram.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsqCAg2BqC,AAW9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMoB;;;;;KAKtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA8CmB","file":"devextreme-angular-ui-diagram.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxDiagram from 'devextreme/ui/diagram';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiCustomShapeComponent, DxoContextMenuModule, DxiCustomShapeModule, DxiConnectionPointModule, DxoEdgesModule, DxoExportModule, DxoGridSizeModule, DxoNodesModule, DxoAutoLayoutModule, DxoPageSizeModule, DxiItemModule, DxoPropertiesPanelModule, DxiGroupModule, DxoToolbarModule, DxoToolboxModule, DxoZoomLevelModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * [tags] ctp The Diagram widget provides a visual interface to help you design new and modify existing diagrams. #include common-ctp-note with { component: \"Diagram\" }\r\n */\r\nvar DxDiagramComponent = /** @class */ (function (_super) {\r\n    __extends(DxDiagramComponent, _super);\r\n    function DxDiagramComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'dataChanged', emit: 'onDataChanged' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'itemClick', emit: 'onItemClick' },\r\n            { subscribe: 'itemDblClick', emit: 'onItemDblClick' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'autoZoomChange' },\r\n            { emit: 'contextMenuChange' },\r\n            { emit: 'customShapesChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'edgesChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'fullScreenChange' },\r\n            { emit: 'gridSizeChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'nodesChange' },\r\n            { emit: 'pageColorChange' },\r\n            { emit: 'pageOrientationChange' },\r\n            { emit: 'pageSizeChange' },\r\n            { emit: 'propertiesPanelChange' },\r\n            { emit: 'readOnlyChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showGridChange' },\r\n            { emit: 'simpleViewChange' },\r\n            { emit: 'snapToGridChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'toolbarChange' },\r\n            { emit: 'toolboxChange' },\r\n            { emit: 'unitsChange' },\r\n            { emit: 'viewUnitsChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' },\r\n            { emit: 'zoomLevelChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"accessKey\", {\r\n        /**\r\n         * Specifies the shortcut key that sets focus on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"activeStateEnabled\", {\r\n        /**\r\n         * Specifies whether or not the widget changes its state when interacting with a user.\r\n         */\r\n        get: function () {\r\n            return this._getOption('activeStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('activeStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"autoZoom\", {\r\n        /**\r\n         * Specifies whether the Diagram widget automatically zooms the work area.\r\n         */\r\n        get: function () {\r\n            return this._getOption('autoZoom');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('autoZoom', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"contextMenu\", {\r\n        /**\r\n         * Configures the context menu's settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('contextMenu');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('contextMenu', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"customShapes\", {\r\n        /**\r\n         * Provide access to an array of custom shapes.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customShapes');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customShapes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"edges\", {\r\n        /**\r\n         * Allows you to bind the collection of diagram edges to a data source.\r\n         */\r\n        get: function () {\r\n            return this._getOption('edges');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('edges', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures export settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"focusStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget can be focused using keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"fullScreen\", {\r\n        /**\r\n         * Specifies whether or not to display the widget in full-screen mode.\r\n         */\r\n        get: function () {\r\n            return this._getOption('fullScreen');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('fullScreen', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"gridSize\", {\r\n        /**\r\n         * Specifies the grid pitch.\r\n         */\r\n        get: function () {\r\n            return this._getOption('gridSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('gridSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"hoverStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget changes its state when a user pauses on it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hoverStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hoverStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"nodes\", {\r\n        /**\r\n         * Allows you to bind the collection of diagram nodes to a data source.\r\n         */\r\n        get: function () {\r\n            return this._getOption('nodes');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('nodes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"pageColor\", {\r\n        /**\r\n         * Specifies the color of a diagram page.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pageColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pageColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"pageOrientation\", {\r\n        /**\r\n         * Specifies the page orientation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pageOrientation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pageOrientation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"pageSize\", {\r\n        /**\r\n         * Specifies a size of pages.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pageSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pageSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"propertiesPanel\", {\r\n        /**\r\n         * Provides access to Properties panel settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('propertiesPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('propertiesPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"readOnly\", {\r\n        /**\r\n         * Specifies whether the diagram is read-only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('readOnly');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('readOnly', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"showGrid\", {\r\n        /**\r\n         * Specifies whether grid lines are visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showGrid');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showGrid', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"simpleView\", {\r\n        /**\r\n         * Switch the Diagram widget to simple view mode.\r\n         */\r\n        get: function () {\r\n            return this._getOption('simpleView');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('simpleView', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"snapToGrid\", {\r\n        /**\r\n         * Specifies whether diagram elements should snap to grid lines.\r\n         */\r\n        get: function () {\r\n            return this._getOption('snapToGrid');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('snapToGrid', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"tabIndex\", {\r\n        /**\r\n         * Specifies the number of the element when the Tab key is used for navigating.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"toolbar\", {\r\n        /**\r\n         * Provides access to toolbar settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('toolbar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('toolbar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"toolbox\", {\r\n        /**\r\n         * Provides access to toolbox settings.\r\n         */\r\n        get: function () {\r\n            return this._getOption('toolbox');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('toolbox', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"units\", {\r\n        /**\r\n         * Specifies the unit for measurement options (for example, defaultHeight, gridSize, leftExpr).\r\n         */\r\n        get: function () {\r\n            return this._getOption('units');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('units', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"viewUnits\", {\r\n        /**\r\n         * Specifies the measurement unit that is displayed in user interface elements.\r\n         */\r\n        get: function () {\r\n            return this._getOption('viewUnits');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('viewUnits', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"visible\", {\r\n        /**\r\n         * Specifies whether the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"zoomLevel\", {\r\n        /**\r\n         * Specifies the zoom level.\r\n         */\r\n        get: function () {\r\n            return this._getOption('zoomLevel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('zoomLevel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxDiagramComponent.prototype, \"customShapesChildren\", {\r\n        get: function () {\r\n            return this._getOption('customShapes');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('customShapes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxDiagramComponent.prototype._createInstance = function (element, options) {\r\n        return new DxDiagram(element, options);\r\n    };\r\n    DxDiagramComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxDiagramComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('customShapes', changes);\r\n    };\r\n    DxDiagramComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxDiagramComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('customShapes');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxDiagramComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxDiagramComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"accessKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"activeStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"autoZoom\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"contextMenu\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxDiagramComponent.prototype, \"customShapes\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"edges\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"focusStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"fullScreen\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"gridSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"hoverStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"nodes\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"pageColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"pageOrientation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"pageSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"propertiesPanel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"readOnly\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"showGrid\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"simpleView\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"snapToGrid\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxDiagramComponent.prototype, \"tabIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"toolbar\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"toolbox\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"units\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxDiagramComponent.prototype, \"viewUnits\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxDiagramComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"zoomLevel\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onDataChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onItemClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onItemDblClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"onSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"accessKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"activeStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"autoZoomChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"contextMenuChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"customShapesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"edgesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"fullScreenChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"gridSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"hoverStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"nodesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"pageColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"pageOrientationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"pageSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"propertiesPanelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"readOnlyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"showGridChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"simpleViewChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"snapToGridChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"tabIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"toolbarChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"toolboxChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"unitsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"viewUnitsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxDiagramComponent.prototype, \"zoomLevelChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiCustomShapeComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxDiagramComponent.prototype, \"customShapesChildren\", null);\r\n    DxDiagramComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-diagram',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxDiagramComponent);\r\n    return DxDiagramComponent;\r\n}(DxComponent));\r\nvar DxDiagramModule = /** @class */ (function () {\r\n    function DxDiagramModule() {\r\n    }\r\n    DxDiagramModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoContextMenuModule,\r\n                DxiCustomShapeModule,\r\n                DxiConnectionPointModule,\r\n                DxoEdgesModule,\r\n                DxoExportModule,\r\n                DxoGridSizeModule,\r\n                DxoNodesModule,\r\n                DxoAutoLayoutModule,\r\n                DxoPageSizeModule,\r\n                DxiItemModule,\r\n                DxoPropertiesPanelModule,\r\n                DxiGroupModule,\r\n                DxoToolbarModule,\r\n                DxoToolboxModule,\r\n                DxoZoomLevelModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxDiagramComponent\r\n            ],\r\n            exports: [\r\n                DxDiagramComponent,\r\n                DxoContextMenuModule,\r\n                DxiCustomShapeModule,\r\n                DxiConnectionPointModule,\r\n                DxoEdgesModule,\r\n                DxoExportModule,\r\n                DxoGridSizeModule,\r\n                DxoNodesModule,\r\n                DxoAutoLayoutModule,\r\n                DxoPageSizeModule,\r\n                DxiItemModule,\r\n                DxoPropertiesPanelModule,\r\n                DxiGroupModule,\r\n                DxoToolbarModule,\r\n                DxoToolboxModule,\r\n                DxoZoomLevelModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxDiagramModule);\r\n    return DxDiagramModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxDiagramComponent, DxDiagramModule };\n"]}