{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-validator.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uCAkQuC,AAWhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAQsB;;;;;KAKxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAoBqB","file":"devextreme-angular-ui-validator.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, SkipSelf, Optional, Host, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxValidator from 'devextreme/ui/validator';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponentExtension, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiValidationRuleComponent, DxoAdapterModule, DxiValidationRuleModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * A widget that is used to validate the associated DevExtreme editors against the defined validation rules.\r\n */\r\nvar DxValidatorComponent = /** @class */ (function (_super) {\r\n    __extends(DxValidatorComponent, _super);\r\n    function DxValidatorComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, parentOptionHost, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'validated', emit: 'onValidated' },\r\n            { emit: 'adapterChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'nameChange' },\r\n            { emit: 'validationGroupChange' },\r\n            { emit: 'validationRulesChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        _this.parentElement = _this.getParentElement(parentOptionHost);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"adapter\", {\r\n        /**\r\n         * An object that specifies what and when to validate, and how to apply the validation result.\r\n         */\r\n        get: function () {\r\n            return this._getOption('adapter');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('adapter', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"name\", {\r\n        /**\r\n         * Specifies the editor name to be used in the validation default messages.\r\n         */\r\n        get: function () {\r\n            return this._getOption('name');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('name', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"validationGroup\", {\r\n        /**\r\n         * Specifies the validation group the editor will be related to.\r\n         */\r\n        get: function () {\r\n            return this._getOption('validationGroup');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationGroup', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"validationRules\", {\r\n        /**\r\n         * An array of validation rules to be checked for the editor with which the dxValidator object is associated.\r\n         */\r\n        get: function () {\r\n            return this._getOption('validationRules');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('validationRules', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxValidatorComponent.prototype, \"validationRulesChildren\", {\r\n        get: function () {\r\n            return this._getOption('validationRules');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('validationRules', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxValidatorComponent.prototype._createInstance = function (element, options) {\r\n        if (this.parentElement) {\r\n            return new DxValidator(this.parentElement, options);\r\n        }\r\n        return new DxValidator(element, options);\r\n    };\r\n    DxValidatorComponent.prototype.getParentElement = function (host) {\r\n        if (host) {\r\n            var parentHost = host.getHost();\r\n            return parentHost.element.nativeElement;\r\n        }\r\n        return;\r\n    };\r\n    DxValidatorComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxValidatorComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('validationRules', changes);\r\n    };\r\n    DxValidatorComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxValidatorComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('validationRules');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxValidatorComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxValidatorComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Optional }, { type: Host }] },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxValidatorComponent.prototype, \"adapter\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxValidatorComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxValidatorComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxValidatorComponent.prototype, \"name\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxValidatorComponent.prototype, \"validationGroup\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxValidatorComponent.prototype, \"validationRules\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxValidatorComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"onValidated\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"adapterChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"nameChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"validationGroupChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"validationRulesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxValidatorComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiValidationRuleComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxValidatorComponent.prototype, \"validationRulesChildren\", null);\r\n    DxValidatorComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-validator',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(5, SkipSelf()), __param(5, Optional()), __param(5, Host()),\r\n        __param(8, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxValidatorComponent);\r\n    return DxValidatorComponent;\r\n}(DxComponentExtension));\r\nvar DxValidatorModule = /** @class */ (function () {\r\n    function DxValidatorModule() {\r\n    }\r\n    DxValidatorModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoAdapterModule,\r\n                DxiValidationRuleModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxValidatorComponent\r\n            ],\r\n            exports: [\r\n                DxValidatorComponent,\r\n                DxoAdapterModule,\r\n                DxiValidationRuleModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxValidatorModule);\r\n    return DxValidatorModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxValidatorComponent, DxValidatorModule };\n"]}