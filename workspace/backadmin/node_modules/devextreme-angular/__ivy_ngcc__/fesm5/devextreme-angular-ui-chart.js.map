{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-chart.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAy+CmC,AAY5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMkB;;;;;KAKpgDAoLiB","file":"devextreme-angular-ui-chart.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport 'devextreme/bundles/dx.all';\nimport DxChart from 'devextreme/viz/chart';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiAnnotationComponent, DxiPaneComponent, DxiSeriesComponent, DxiValueAxisComponent, DxoAdaptiveLayoutModule, DxoAnimationModule, DxiAnnotationModule, DxoBorderModule, DxoFontModule, DxoImageModule, DxoShadowModule, DxoArgumentAxisModule, DxoAggregationIntervalModule, DxiBreakModule, DxoBreakStyleModule, DxiConstantLineModule, DxoLabelModule, DxoConstantLineStyleModule, DxoGridModule, DxoFormatModule, DxoMinorGridModule, DxoMinorTickModule, DxoMinorTickIntervalModule, DxoMinVisualRangeLengthModule, DxiStripModule, DxoStripStyleModule, DxoTickModule, DxoTickIntervalModule, DxoTitleModule, DxoCommonAnnotationSettingsModule, DxoCommonAxisSettingsModule, DxoCommonPaneSettingsModule, DxoCommonSeriesSettingsModule, DxoAggregationModule, DxoAreaModule, DxoHoverStyleModule, DxoHatchingModule, DxoConnectorModule, DxoPointModule, DxoHeightModule, DxoUrlModule, DxoWidthModule, DxoSelectionStyleModule, DxoReductionModule, DxoValueErrorBarModule, DxoBarModule, DxoBubbleModule, DxoCandlestickModule, DxoFullstackedareaModule, DxoFullstackedbarModule, DxoFullstackedlineModule, DxoFullstackedsplineModule, DxoFullstackedsplineareaModule, DxoArgumentFormatModule, DxoLineModule, DxoRangeareaModule, DxoRangebarModule, DxoScatterModule, DxoSplineModule, DxoSplineareaModule, DxoStackedareaModule, DxoStackedbarModule, DxoStackedlineModule, DxoStackedsplineModule, DxoStackedsplineareaModule, DxoStepareaModule, DxoSteplineModule, DxoStockModule, DxoCrosshairModule, DxoHorizontalLineModule, DxoVerticalLineModule, DxoDataPrepareSettingsModule, DxoExportModule, DxoLegendModule, DxoMarginModule, DxoSubtitleModule, DxoLoadingIndicatorModule, DxiPaneModule, DxoScrollBarModule, DxiSeriesModule, DxoSeriesTemplateModule, DxoSizeModule, DxoTooltipModule, DxiValueAxisModule, DxoZoomAndPanModule, DxoDragBoxStyleModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Chart is a widget that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.\r\n */\r\nvar DxChartComponent = /** @class */ (function (_super) {\r\n    __extends(DxChartComponent, _super);\r\n    function DxChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'argumentAxisClick', emit: 'onArgumentAxisClick' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'done', emit: 'onDone' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'legendClick', emit: 'onLegendClick' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'pointClick', emit: 'onPointClick' },\r\n            { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },\r\n            { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },\r\n            { subscribe: 'seriesClick', emit: 'onSeriesClick' },\r\n            { subscribe: 'seriesHoverChanged', emit: 'onSeriesHoverChanged' },\r\n            { subscribe: 'seriesSelectionChanged', emit: 'onSeriesSelectionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { subscribe: 'zoomEnd', emit: 'onZoomEnd' },\r\n            { subscribe: 'zoomStart', emit: 'onZoomStart' },\r\n            { emit: 'adaptiveLayoutChange' },\r\n            { emit: 'adjustOnZoomChange' },\r\n            { emit: 'animationChange' },\r\n            { emit: 'annotationsChange' },\r\n            { emit: 'argumentAxisChange' },\r\n            { emit: 'autoHidePointMarkersChange' },\r\n            { emit: 'barGroupPaddingChange' },\r\n            { emit: 'barGroupWidthChange' },\r\n            { emit: 'barWidthChange' },\r\n            { emit: 'commonAnnotationSettingsChange' },\r\n            { emit: 'commonAxisSettingsChange' },\r\n            { emit: 'commonPaneSettingsChange' },\r\n            { emit: 'commonSeriesSettingsChange' },\r\n            { emit: 'containerBackgroundColorChange' },\r\n            { emit: 'crosshairChange' },\r\n            { emit: 'customizeAnnotationChange' },\r\n            { emit: 'customizeLabelChange' },\r\n            { emit: 'customizePointChange' },\r\n            { emit: 'dataPrepareSettingsChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'defaultPaneChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'equalBarWidthChange' },\r\n            { emit: 'exportChange' },\r\n            { emit: 'legendChange' },\r\n            { emit: 'loadingIndicatorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'maxBubbleSizeChange' },\r\n            { emit: 'minBubbleSizeChange' },\r\n            { emit: 'negativesAsZeroesChange' },\r\n            { emit: 'paletteChange' },\r\n            { emit: 'paletteExtensionModeChange' },\r\n            { emit: 'panesChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'pointSelectionModeChange' },\r\n            { emit: 'redrawOnResizeChange' },\r\n            { emit: 'resizePanesOnZoomChange' },\r\n            { emit: 'resolveLabelOverlappingChange' },\r\n            { emit: 'rotatedChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'scrollBarChange' },\r\n            { emit: 'scrollingModeChange' },\r\n            { emit: 'seriesChange' },\r\n            { emit: 'seriesSelectionModeChange' },\r\n            { emit: 'seriesTemplateChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'stickyHoveringChange' },\r\n            { emit: 'synchronizeMultiAxesChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'titleChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'useAggregationChange' },\r\n            { emit: 'valueAxisChange' },\r\n            { emit: 'zoomAndPanChange' },\r\n            { emit: 'zoomingModeChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxChartComponent.prototype, \"adaptiveLayout\", {\r\n        /**\r\n         * Specifies adaptive layout options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('adaptiveLayout');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('adaptiveLayout', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"adjustOnZoom\", {\r\n        /**\r\n         * Specifies whether to adjust the value axis's visualRange when the argument axis is being zoomed or panned.\r\n         */\r\n        get: function () {\r\n            return this._getOption('adjustOnZoom');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('adjustOnZoom', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"animation\", {\r\n        /**\r\n         * Specifies animation options.\r\n         */\r\n        get: function () {\r\n            return this._getOption('animation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('animation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"annotations\", {\r\n        /**\r\n         * Specifies the annotation collection.\r\n         */\r\n        get: function () {\r\n            return this._getOption('annotations');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('annotations', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"argumentAxis\", {\r\n        /**\r\n         * Configures the argument axis.\r\n         */\r\n        get: function () {\r\n            return this._getOption('argumentAxis');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('argumentAxis', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"autoHidePointMarkers\", {\r\n        /**\r\n         * Specifies whether to hide series point markers automatically to reduce visual clutter.\r\n         */\r\n        get: function () {\r\n            return this._getOption('autoHidePointMarkers');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('autoHidePointMarkers', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"barGroupPadding\", {\r\n        /**\r\n         * Controls the padding and consequently the width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set.\r\n         */\r\n        get: function () {\r\n            return this._getOption('barGroupPadding');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('barGroupPadding', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"barGroupWidth\", {\r\n        /**\r\n         * Specifies a fixed width for groups of bars with the same argument, measured in pixels. Takes precedence over the barGroupPadding option.\r\n         */\r\n        get: function () {\r\n            return this._getOption('barGroupWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('barGroupWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"barWidth\", {\r\n        /**\r\n         * Use CommonSeries.barPadding instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('barWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('barWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"commonAnnotationSettings\", {\r\n        /**\r\n         * Specifies settings common for all annotations in the chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('commonAnnotationSettings');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('commonAnnotationSettings', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"commonAxisSettings\", {\r\n        /**\r\n         * Defines common settings for both the argument and value axis in a chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('commonAxisSettings');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('commonAxisSettings', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"commonPaneSettings\", {\r\n        /**\r\n         * Defines common settings for all panes in a chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('commonPaneSettings');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('commonPaneSettings', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"commonSeriesSettings\", {\r\n        /**\r\n         * Specifies settings common for all series in the chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('commonSeriesSettings');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('commonSeriesSettings', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"containerBackgroundColor\", {\r\n        /**\r\n         * Colors the background of the chart container.\r\n         */\r\n        get: function () {\r\n            return this._getOption('containerBackgroundColor');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('containerBackgroundColor', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"crosshair\", {\r\n        /**\r\n         * Configures the crosshair feature.\r\n         */\r\n        get: function () {\r\n            return this._getOption('crosshair');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('crosshair', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"customizeAnnotation\", {\r\n        /**\r\n         * Customizes an individual annotation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customizeAnnotation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customizeAnnotation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"customizeLabel\", {\r\n        /**\r\n         * Customizes the appearance of an individual point label.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customizeLabel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customizeLabel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"customizePoint\", {\r\n        /**\r\n         * Customizes the appearance of an individual series point.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customizePoint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customizePoint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"dataPrepareSettings\", {\r\n        /**\r\n         * Processes data before visualizing it.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataPrepareSettings');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataPrepareSettings', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Binds the widget to data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"defaultPane\", {\r\n        /**\r\n         * Specifies which pane should be used by default.\r\n         */\r\n        get: function () {\r\n            return this._getOption('defaultPane');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('defaultPane', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to the user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"equalBarWidth\", {\r\n        /**\r\n         * Use CommonSeries.ignoreEmptyPoints instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('equalBarWidth');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('equalBarWidth', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"export\", {\r\n        /**\r\n         * Configures the exporting and printing features.\r\n         */\r\n        get: function () {\r\n            return this._getOption('export');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('export', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"legend\", {\r\n        /**\r\n         * Specifies the options of a chart's legend.\r\n         */\r\n        get: function () {\r\n            return this._getOption('legend');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('legend', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"loadingIndicator\", {\r\n        /**\r\n         * Configures the loading indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('loadingIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('loadingIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"margin\", {\r\n        /**\r\n         * Generates space around the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('margin');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('margin', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"maxBubbleSize\", {\r\n        /**\r\n         * Specifies a coefficient determining the diameter of the largest bubble.\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxBubbleSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxBubbleSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"minBubbleSize\", {\r\n        /**\r\n         * Specifies the diameter of the smallest bubble measured in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('minBubbleSize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('minBubbleSize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"negativesAsZeroes\", {\r\n        /**\r\n         * Forces the widget to treat negative values as zeroes. Applies to stacked-like series only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('negativesAsZeroes');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('negativesAsZeroes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"palette\", {\r\n        /**\r\n         * Sets the palette to be used for colorizing series and their elements.\r\n         */\r\n        get: function () {\r\n            return this._getOption('palette');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('palette', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"paletteExtensionMode\", {\r\n        /**\r\n         * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget).\r\n         */\r\n        get: function () {\r\n            return this._getOption('paletteExtensionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('paletteExtensionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"panes\", {\r\n        /**\r\n         * Declares a collection of panes.\r\n         */\r\n        get: function () {\r\n            return this._getOption('panes');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('panes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"pathModified\", {\r\n        /**\r\n         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pathModified');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pathModified', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"pointSelectionMode\", {\r\n        /**\r\n         * Specifies whether a single point or multiple points can be selected in the chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('pointSelectionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('pointSelectionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"redrawOnResize\", {\r\n        /**\r\n         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.\r\n         */\r\n        get: function () {\r\n            return this._getOption('redrawOnResize');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('redrawOnResize', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"resizePanesOnZoom\", {\r\n        /**\r\n         * Specifies whether panes can be resized if other chart elements require more space after zooming or panning.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resizePanesOnZoom');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resizePanesOnZoom', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"resolveLabelOverlapping\", {\r\n        /**\r\n         * Specifies how the chart must behave when series point labels overlap.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resolveLabelOverlapping');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resolveLabelOverlapping', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"rotated\", {\r\n        /**\r\n         * Swaps the axes around making the value axis horizontal and the argument axis vertical.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rotated');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rotated', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"scrollBar\", {\r\n        /**\r\n         * Specifies the settings of the scroll bar.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollBar');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollBar', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"scrollingMode\", {\r\n        /**\r\n         * Use the zoomAndPan option instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('scrollingMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('scrollingMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"series\", {\r\n        /**\r\n         * Specifies options for Chart widget series.\r\n         */\r\n        get: function () {\r\n            return this._getOption('series');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('series', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"seriesSelectionMode\", {\r\n        /**\r\n         * Specifies whether a single series or multiple series can be selected in the chart.\r\n         */\r\n        get: function () {\r\n            return this._getOption('seriesSelectionMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('seriesSelectionMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"seriesTemplate\", {\r\n        /**\r\n         * Defines options for the series template.\r\n         */\r\n        get: function () {\r\n            return this._getOption('seriesTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('seriesTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"size\", {\r\n        /**\r\n         * Specifies the widget's size in pixels.\r\n         */\r\n        get: function () {\r\n            return this._getOption('size');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('size', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"stickyHovering\", {\r\n        /**\r\n         * Specifies whether a point should remain in the hover state when the mouse pointer moves away.\r\n         */\r\n        get: function () {\r\n            return this._getOption('stickyHovering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('stickyHovering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"synchronizeMultiAxes\", {\r\n        /**\r\n         * Indicates whether or not to synchronize value axes when they are displayed on a single pane.\r\n         */\r\n        get: function () {\r\n            return this._getOption('synchronizeMultiAxes');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('synchronizeMultiAxes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"theme\", {\r\n        /**\r\n         * Sets the name of the theme the widget uses.\r\n         */\r\n        get: function () {\r\n            return this._getOption('theme');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('theme', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"title\", {\r\n        /**\r\n         * Configures the widget's title.\r\n         */\r\n        get: function () {\r\n            return this._getOption('title');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('title', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"tooltip\", {\r\n        /**\r\n         * Configures tooltips.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tooltip');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tooltip', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"useAggregation\", {\r\n        /**\r\n         * Use CommonSeries.aggregation.enabled instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('useAggregation');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('useAggregation', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"valueAxis\", {\r\n        /**\r\n         * Configures the value axis.\r\n         */\r\n        get: function () {\r\n            return this._getOption('valueAxis');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('valueAxis', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"zoomAndPan\", {\r\n        /**\r\n         * Configures zooming and panning.\r\n         */\r\n        get: function () {\r\n            return this._getOption('zoomAndPan');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('zoomAndPan', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"zoomingMode\", {\r\n        /**\r\n         * Use the zoomAndPan option instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('zoomingMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('zoomingMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"annotationsChildren\", {\r\n        get: function () {\r\n            return this._getOption('annotations');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('annotations', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"panesChildren\", {\r\n        get: function () {\r\n            return this._getOption('panes');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('panes', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"seriesChildren\", {\r\n        get: function () {\r\n            return this._getOption('series');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('series', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxChartComponent.prototype, \"valueAxisChildren\", {\r\n        get: function () {\r\n            return this._getOption('valueAxis');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('valueAxis', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxChartComponent.prototype._createInstance = function (element, options) {\r\n        return new DxChart(element, options);\r\n    };\r\n    DxChartComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxChartComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('annotations', changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('palette', changes);\r\n        this.setupChanges('panes', changes);\r\n        this.setupChanges('series', changes);\r\n        this.setupChanges('valueAxis', changes);\r\n    };\r\n    DxChartComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxChartComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('annotations');\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('palette');\r\n        this._idh.doCheck('panes');\r\n        this._idh.doCheck('series');\r\n        this._idh.doCheck('valueAxis');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxChartComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxChartComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"adaptiveLayout\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"adjustOnZoom\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"animation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxChartComponent.prototype, \"annotations\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"argumentAxis\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"autoHidePointMarkers\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxChartComponent.prototype, \"barGroupPadding\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxChartComponent.prototype, \"barGroupWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxChartComponent.prototype, \"barWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"commonAnnotationSettings\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"commonAxisSettings\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"commonPaneSettings\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"commonSeriesSettings\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"containerBackgroundColor\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"crosshair\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxChartComponent.prototype, \"customizeAnnotation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxChartComponent.prototype, \"customizeLabel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxChartComponent.prototype, \"customizePoint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"dataPrepareSettings\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"defaultPane\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"equalBarWidth\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"export\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"legend\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"loadingIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"margin\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxChartComponent.prototype, \"maxBubbleSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxChartComponent.prototype, \"minBubbleSize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"negativesAsZeroes\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"palette\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"paletteExtensionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxChartComponent.prototype, \"panes\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"pathModified\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"pointSelectionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"redrawOnResize\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"resizePanesOnZoom\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"resolveLabelOverlapping\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"rotated\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"scrollBar\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"scrollingMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"series\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"seriesSelectionMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"seriesTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"size\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"stickyHovering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"synchronizeMultiAxes\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"theme\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"title\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"tooltip\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxChartComponent.prototype, \"useAggregation\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxChartComponent.prototype, \"valueAxis\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"zoomAndPan\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxChartComponent.prototype, \"zoomingMode\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onArgumentAxisClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onDone\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onDrawn\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onExported\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onExporting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onFileSaving\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onIncidentOccurred\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onLegendClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onPointClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onPointHoverChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onPointSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onSeriesClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onSeriesHoverChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onSeriesSelectionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onTooltipHidden\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onTooltipShown\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onZoomEnd\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"onZoomStart\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"adaptiveLayoutChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"adjustOnZoomChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"animationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"annotationsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"argumentAxisChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"autoHidePointMarkersChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"barGroupPaddingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"barGroupWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"barWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"commonAnnotationSettingsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"commonAxisSettingsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"commonPaneSettingsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"commonSeriesSettingsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"containerBackgroundColorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"crosshairChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"customizeAnnotationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"customizeLabelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"customizePointChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"dataPrepareSettingsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"defaultPaneChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"equalBarWidthChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"exportChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"legendChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"loadingIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"marginChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"maxBubbleSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"minBubbleSizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"negativesAsZeroesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"paletteChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"paletteExtensionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"panesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"pathModifiedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"pointSelectionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"redrawOnResizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"resizePanesOnZoomChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"resolveLabelOverlappingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"rotatedChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"scrollBarChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"scrollingModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"seriesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"seriesSelectionModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"seriesTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"sizeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"stickyHoveringChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"synchronizeMultiAxesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"themeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"titleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"tooltipChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"useAggregationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"valueAxisChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"zoomAndPanChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxChartComponent.prototype, \"zoomingModeChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiAnnotationComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"annotationsChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiPaneComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"panesChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiSeriesComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"seriesChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiValueAxisComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxChartComponent.prototype, \"valueAxisChildren\", null);\r\n    DxChartComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-chart',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ],\r\n            styles: [' :host {  display: block; }']\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxChartComponent);\r\n    return DxChartComponent;\r\n}(DxComponent));\r\nvar DxChartModule = /** @class */ (function () {\r\n    function DxChartModule() {\r\n    }\r\n    DxChartModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoAdaptiveLayoutModule,\r\n                DxoAnimationModule,\r\n                DxiAnnotationModule,\r\n                DxoBorderModule,\r\n                DxoFontModule,\r\n                DxoImageModule,\r\n                DxoShadowModule,\r\n                DxoArgumentAxisModule,\r\n                DxoAggregationIntervalModule,\r\n                DxiBreakModule,\r\n                DxoBreakStyleModule,\r\n                DxiConstantLineModule,\r\n                DxoLabelModule,\r\n                DxoConstantLineStyleModule,\r\n                DxoGridModule,\r\n                DxoFormatModule,\r\n                DxoMinorGridModule,\r\n                DxoMinorTickModule,\r\n                DxoMinorTickIntervalModule,\r\n                DxoMinVisualRangeLengthModule,\r\n                DxiStripModule,\r\n                DxoStripStyleModule,\r\n                DxoTickModule,\r\n                DxoTickIntervalModule,\r\n                DxoTitleModule,\r\n                DxoCommonAnnotationSettingsModule,\r\n                DxoCommonAxisSettingsModule,\r\n                DxoCommonPaneSettingsModule,\r\n                DxoCommonSeriesSettingsModule,\r\n                DxoAggregationModule,\r\n                DxoAreaModule,\r\n                DxoHoverStyleModule,\r\n                DxoHatchingModule,\r\n                DxoConnectorModule,\r\n                DxoPointModule,\r\n                DxoHeightModule,\r\n                DxoUrlModule,\r\n                DxoWidthModule,\r\n                DxoSelectionStyleModule,\r\n                DxoReductionModule,\r\n                DxoValueErrorBarModule,\r\n                DxoBarModule,\r\n                DxoBubbleModule,\r\n                DxoCandlestickModule,\r\n                DxoFullstackedareaModule,\r\n                DxoFullstackedbarModule,\r\n                DxoFullstackedlineModule,\r\n                DxoFullstackedsplineModule,\r\n                DxoFullstackedsplineareaModule,\r\n                DxoArgumentFormatModule,\r\n                DxoLineModule,\r\n                DxoRangeareaModule,\r\n                DxoRangebarModule,\r\n                DxoScatterModule,\r\n                DxoSplineModule,\r\n                DxoSplineareaModule,\r\n                DxoStackedareaModule,\r\n                DxoStackedbarModule,\r\n                DxoStackedlineModule,\r\n                DxoStackedsplineModule,\r\n                DxoStackedsplineareaModule,\r\n                DxoStepareaModule,\r\n                DxoSteplineModule,\r\n                DxoStockModule,\r\n                DxoCrosshairModule,\r\n                DxoHorizontalLineModule,\r\n                DxoVerticalLineModule,\r\n                DxoDataPrepareSettingsModule,\r\n                DxoExportModule,\r\n                DxoLegendModule,\r\n                DxoMarginModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxiPaneModule,\r\n                DxoScrollBarModule,\r\n                DxiSeriesModule,\r\n                DxoSeriesTemplateModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxiValueAxisModule,\r\n                DxoZoomAndPanModule,\r\n                DxoDragBoxStyleModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxChartComponent\r\n            ],\r\n            exports: [\r\n                DxChartComponent,\r\n                DxoAdaptiveLayoutModule,\r\n                DxoAnimationModule,\r\n                DxiAnnotationModule,\r\n                DxoBorderModule,\r\n                DxoFontModule,\r\n                DxoImageModule,\r\n                DxoShadowModule,\r\n                DxoArgumentAxisModule,\r\n                DxoAggregationIntervalModule,\r\n                DxiBreakModule,\r\n                DxoBreakStyleModule,\r\n                DxiConstantLineModule,\r\n                DxoLabelModule,\r\n                DxoConstantLineStyleModule,\r\n                DxoGridModule,\r\n                DxoFormatModule,\r\n                DxoMinorGridModule,\r\n                DxoMinorTickModule,\r\n                DxoMinorTickIntervalModule,\r\n                DxoMinVisualRangeLengthModule,\r\n                DxiStripModule,\r\n                DxoStripStyleModule,\r\n                DxoTickModule,\r\n                DxoTickIntervalModule,\r\n                DxoTitleModule,\r\n                DxoCommonAnnotationSettingsModule,\r\n                DxoCommonAxisSettingsModule,\r\n                DxoCommonPaneSettingsModule,\r\n                DxoCommonSeriesSettingsModule,\r\n                DxoAggregationModule,\r\n                DxoAreaModule,\r\n                DxoHoverStyleModule,\r\n                DxoHatchingModule,\r\n                DxoConnectorModule,\r\n                DxoPointModule,\r\n                DxoHeightModule,\r\n                DxoUrlModule,\r\n                DxoWidthModule,\r\n                DxoSelectionStyleModule,\r\n                DxoReductionModule,\r\n                DxoValueErrorBarModule,\r\n                DxoBarModule,\r\n                DxoBubbleModule,\r\n                DxoCandlestickModule,\r\n                DxoFullstackedareaModule,\r\n                DxoFullstackedbarModule,\r\n                DxoFullstackedlineModule,\r\n                DxoFullstackedsplineModule,\r\n                DxoFullstackedsplineareaModule,\r\n                DxoArgumentFormatModule,\r\n                DxoLineModule,\r\n                DxoRangeareaModule,\r\n                DxoRangebarModule,\r\n                DxoScatterModule,\r\n                DxoSplineModule,\r\n                DxoSplineareaModule,\r\n                DxoStackedareaModule,\r\n                DxoStackedbarModule,\r\n                DxoStackedlineModule,\r\n                DxoStackedsplineModule,\r\n                DxoStackedsplineareaModule,\r\n                DxoStepareaModule,\r\n                DxoSteplineModule,\r\n                DxoStockModule,\r\n                DxoCrosshairModule,\r\n                DxoHorizontalLineModule,\r\n                DxoVerticalLineModule,\r\n                DxoDataPrepareSettingsModule,\r\n                DxoExportModule,\r\n                DxoLegendModule,\r\n                DxoMarginModule,\r\n                DxoSubtitleModule,\r\n                DxoLoadingIndicatorModule,\r\n                DxiPaneModule,\r\n                DxoScrollBarModule,\r\n                DxiSeriesModule,\r\n                DxoSeriesTemplateModule,\r\n                DxoSizeModule,\r\n                DxoTooltipModule,\r\n                DxiValueAxisModule,\r\n                DxoZoomAndPanModule,\r\n                DxoDragBoxStyleModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxChartModule);\r\n    return DxChartModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxChartComponent, DxChartModule };\n"]}