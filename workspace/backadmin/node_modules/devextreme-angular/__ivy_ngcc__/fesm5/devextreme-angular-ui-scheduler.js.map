{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/devextreme-angular/fesm5/devextreme-angular-ui-scheduler.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAsuCAi9CuC,AAWhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAMsB;;;;;KAKxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAwBqB","file":"devextreme-angular-ui-scheduler.js","sourcesContent":["import { __extends, __decorate, __metadata, __param } from 'tslib';\nimport { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';\nimport { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';\nimport DxScheduler from 'devextreme/ui/scheduler';\nimport { DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxComponent, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';\nimport { DxiResourceComponent, DxiViewComponent, DxoAppointmentDraggingModule, DxoEditingModule, DxiResourceModule, DxiViewModule } from 'devextreme-angular/ui/nested';\n\n/*!\r\n * devextreme-angular\r\n * Version: 19.2.6\r\n * Build date: Thu Jan 30 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\n/**\r\n * The Scheduler is a widget that represents scheduled data and allows a user to manage and edit it.\r\n */\r\nvar DxSchedulerComponent = /** @class */ (function (_super) {\r\n    __extends(DxSchedulerComponent, _super);\r\n    function DxSchedulerComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {\r\n        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;\r\n        _this._watcherHelper = _watcherHelper;\r\n        _this._idh = _idh;\r\n        _this._createEventEmitters([\r\n            { subscribe: 'appointmentAdded', emit: 'onAppointmentAdded' },\r\n            { subscribe: 'appointmentAdding', emit: 'onAppointmentAdding' },\r\n            { subscribe: 'appointmentClick', emit: 'onAppointmentClick' },\r\n            { subscribe: 'appointmentContextMenu', emit: 'onAppointmentContextMenu' },\r\n            { subscribe: 'appointmentDblClick', emit: 'onAppointmentDblClick' },\r\n            { subscribe: 'appointmentDeleted', emit: 'onAppointmentDeleted' },\r\n            { subscribe: 'appointmentDeleting', emit: 'onAppointmentDeleting' },\r\n            { subscribe: 'appointmentFormCreated', emit: 'onAppointmentFormCreated' },\r\n            { subscribe: 'appointmentFormOpening', emit: 'onAppointmentFormOpening' },\r\n            { subscribe: 'appointmentRendered', emit: 'onAppointmentRendered' },\r\n            { subscribe: 'appointmentUpdated', emit: 'onAppointmentUpdated' },\r\n            { subscribe: 'appointmentUpdating', emit: 'onAppointmentUpdating' },\r\n            { subscribe: 'cellClick', emit: 'onCellClick' },\r\n            { subscribe: 'cellContextMenu', emit: 'onCellContextMenu' },\r\n            { subscribe: 'contentReady', emit: 'onContentReady' },\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'accessKeyChange' },\r\n            { emit: 'adaptivityEnabledChange' },\r\n            { emit: 'allDayExprChange' },\r\n            { emit: 'appointmentCollectorTemplateChange' },\r\n            { emit: 'appointmentDraggingChange' },\r\n            { emit: 'appointmentTemplateChange' },\r\n            { emit: 'appointmentTooltipTemplateChange' },\r\n            { emit: 'cellDurationChange' },\r\n            { emit: 'crossScrollingEnabledChange' },\r\n            { emit: 'currentDateChange' },\r\n            { emit: 'currentViewChange' },\r\n            { emit: 'customizeDateNavigatorTextChange' },\r\n            { emit: 'dataCellTemplateChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'dateCellTemplateChange' },\r\n            { emit: 'dateSerializationFormatChange' },\r\n            { emit: 'descriptionExprChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'dropDownAppointmentTemplateChange' },\r\n            { emit: 'editingChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'endDateExprChange' },\r\n            { emit: 'endDateTimeZoneExprChange' },\r\n            { emit: 'endDayHourChange' },\r\n            { emit: 'firstDayOfWeekChange' },\r\n            { emit: 'focusStateEnabledChange' },\r\n            { emit: 'groupByDateChange' },\r\n            { emit: 'groupsChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'indicatorUpdateIntervalChange' },\r\n            { emit: 'maxChange' },\r\n            { emit: 'maxAppointmentsPerCellChange' },\r\n            { emit: 'minChange' },\r\n            { emit: 'noDataTextChange' },\r\n            { emit: 'recurrenceEditModeChange' },\r\n            { emit: 'recurrenceExceptionExprChange' },\r\n            { emit: 'recurrenceRuleExprChange' },\r\n            { emit: 'remoteFilteringChange' },\r\n            { emit: 'resourceCellTemplateChange' },\r\n            { emit: 'resourcesChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'selectedCellDataChange' },\r\n            { emit: 'shadeUntilCurrentTimeChange' },\r\n            { emit: 'showAllDayPanelChange' },\r\n            { emit: 'showCurrentTimeIndicatorChange' },\r\n            { emit: 'startDateExprChange' },\r\n            { emit: 'startDateTimeZoneExprChange' },\r\n            { emit: 'startDayHourChange' },\r\n            { emit: 'tabIndexChange' },\r\n            { emit: 'textExprChange' },\r\n            { emit: 'timeCellTemplateChange' },\r\n            { emit: 'timeZoneChange' },\r\n            { emit: 'useDropDownViewSwitcherChange' },\r\n            { emit: 'viewsChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        _this._idh.setHost(_this);\r\n        optionHost.setHost(_this);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"accessKey\", {\r\n        /**\r\n         * Specifies the shortcut key that sets focus on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('accessKey');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('accessKey', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"adaptivityEnabled\", {\r\n        /**\r\n         * Specifies whether the widget adapts to small screens.\r\n         */\r\n        get: function () {\r\n            return this._getOption('adaptivityEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('adaptivityEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"allDayExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('allDayExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('allDayExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"appointmentCollectorTemplate\", {\r\n        /**\r\n         * Specifies a custom template for cell overflow indicators.\r\n         */\r\n        get: function () {\r\n            return this._getOption('appointmentCollectorTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('appointmentCollectorTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"appointmentDragging\", {\r\n        /**\r\n         * Configures appointment reordering using drag and drop gestures.\r\n         */\r\n        get: function () {\r\n            return this._getOption('appointmentDragging');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('appointmentDragging', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"appointmentTemplate\", {\r\n        /**\r\n         * Specifies a custom template for appointments.\r\n         */\r\n        get: function () {\r\n            return this._getOption('appointmentTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('appointmentTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"appointmentTooltipTemplate\", {\r\n        /**\r\n         * Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator.\r\n         */\r\n        get: function () {\r\n            return this._getOption('appointmentTooltipTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('appointmentTooltipTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"cellDuration\", {\r\n        /**\r\n         * Specifies cell duration in minutes.\r\n         */\r\n        get: function () {\r\n            return this._getOption('cellDuration');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('cellDuration', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"crossScrollingEnabled\", {\r\n        /**\r\n         * Specifies whether or not an end-user can scroll the view in both directions at the same time.\r\n         */\r\n        get: function () {\r\n            return this._getOption('crossScrollingEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('crossScrollingEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"currentDate\", {\r\n        /**\r\n         * Specifies a date displayed on the current scheduler view by default.\r\n         */\r\n        get: function () {\r\n            return this._getOption('currentDate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('currentDate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"currentView\", {\r\n        /**\r\n         * Specifies the currently displayed view. Accepts the view's name or type.\r\n         */\r\n        get: function () {\r\n            return this._getOption('currentView');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('currentView', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"customizeDateNavigatorText\", {\r\n        /**\r\n         * Customizes the date navigator's text.\r\n         */\r\n        get: function () {\r\n            return this._getOption('customizeDateNavigatorText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('customizeDateNavigatorText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"dataCellTemplate\", {\r\n        /**\r\n         * Specifies a custom template for table cells.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataCellTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataCellTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"dataSource\", {\r\n        /**\r\n         * Binds the widget to data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dataSource');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dataSource', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"dateCellTemplate\", {\r\n        /**\r\n         * Specifies a custom template for day scale items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dateCellTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dateCellTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"dateSerializationFormat\", {\r\n        /**\r\n         * Specifies the date-time values' serialization format. Use it only if you do not specify the dataSource at design time.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dateSerializationFormat');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dateSerializationFormat', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"descriptionExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field whose value holds the description of the corresponding appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('descriptionExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('descriptionExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"disabled\", {\r\n        /**\r\n         * Specifies whether the widget responds to user interaction.\r\n         */\r\n        get: function () {\r\n            return this._getOption('disabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('disabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"dropDownAppointmentTemplate\", {\r\n        /**\r\n         * Use the appointmentTooltipTemplate option instead.\r\n         */\r\n        get: function () {\r\n            return this._getOption('dropDownAppointmentTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('dropDownAppointmentTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"editing\", {\r\n        /**\r\n         * Specifies which editing operations an end-user can perform on appointments.\r\n         */\r\n        get: function () {\r\n            return this._getOption('editing');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('editing', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"elementAttr\", {\r\n        /**\r\n         * Specifies the attributes to be attached to the widget's root element.\r\n         */\r\n        get: function () {\r\n            return this._getOption('elementAttr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('elementAttr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"endDateExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines the ending of an appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('endDateExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('endDateExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"endDateTimeZoneExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines the timezone of the appointment end date.\r\n         */\r\n        get: function () {\r\n            return this._getOption('endDateTimeZoneExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('endDateTimeZoneExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"endDayHour\", {\r\n        /**\r\n         * Specifies the last hour on the time scale. Accepts integer values from 0 to 24.\r\n         */\r\n        get: function () {\r\n            return this._getOption('endDayHour');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('endDayHour', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"firstDayOfWeek\", {\r\n        /**\r\n         * Specifies the first day of a week. Does not apply to the agenda view.\r\n         */\r\n        get: function () {\r\n            return this._getOption('firstDayOfWeek');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('firstDayOfWeek', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"focusStateEnabled\", {\r\n        /**\r\n         * Specifies whether the widget can be focused using keyboard navigation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('focusStateEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('focusStateEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"groupByDate\", {\r\n        /**\r\n         * If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is \"horizontal\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('groupByDate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('groupByDate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"groups\", {\r\n        /**\r\n         * Specifies the resource kinds by which the scheduler's appointments are grouped in a timetable.\r\n         */\r\n        get: function () {\r\n            return this._getOption('groups');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('groups', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"height\", {\r\n        /**\r\n         * Specifies the widget's height.\r\n         */\r\n        get: function () {\r\n            return this._getOption('height');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('height', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"hint\", {\r\n        /**\r\n         * Specifies text for a hint that appears when a user pauses on the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('hint');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('hint', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"indicatorUpdateInterval\", {\r\n        /**\r\n         * Specifies the time interval between when the date-time indicator changes its position, in milliseconds.\r\n         */\r\n        get: function () {\r\n            return this._getOption('indicatorUpdateInterval');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('indicatorUpdateInterval', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"max\", {\r\n        /**\r\n         * The latest date the widget allows you to select.\r\n         */\r\n        get: function () {\r\n            return this._getOption('max');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('max', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"maxAppointmentsPerCell\", {\r\n        /**\r\n         * Specifies the limit of full-sized appointments displayed per cell. Applies to all views except \"agenda\".\r\n         */\r\n        get: function () {\r\n            return this._getOption('maxAppointmentsPerCell');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('maxAppointmentsPerCell', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"min\", {\r\n        /**\r\n         * The earliest date the widget allows you to select.\r\n         */\r\n        get: function () {\r\n            return this._getOption('min');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('min', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"noDataText\", {\r\n        /**\r\n         * The text or HTML markup displayed by the widget if the item collection is empty. Available for the Agenda view only.\r\n         */\r\n        get: function () {\r\n            return this._getOption('noDataText');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('noDataText', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"recurrenceEditMode\", {\r\n        /**\r\n         * Specifies the edit mode for recurring appointments.\r\n         */\r\n        get: function () {\r\n            return this._getOption('recurrenceEditMode');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('recurrenceEditMode', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"recurrenceExceptionExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines exceptions for the current recurring appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('recurrenceExceptionExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('recurrenceExceptionExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"recurrenceRuleExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments.\r\n         */\r\n        get: function () {\r\n            return this._getOption('recurrenceRuleExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('recurrenceRuleExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"remoteFiltering\", {\r\n        /**\r\n         * Specifies whether filtering is performed on the server or client side.\r\n         */\r\n        get: function () {\r\n            return this._getOption('remoteFiltering');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('remoteFiltering', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"resourceCellTemplate\", {\r\n        /**\r\n         * Specifies a custom template for resource headers.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resourceCellTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resourceCellTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"resources\", {\r\n        /**\r\n         * Specifies an array of resources available in the scheduler.\r\n         */\r\n        get: function () {\r\n            return this._getOption('resources');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('resources', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"rtlEnabled\", {\r\n        /**\r\n         * Switches the widget to a right-to-left representation.\r\n         */\r\n        get: function () {\r\n            return this._getOption('rtlEnabled');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('rtlEnabled', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"selectedCellData\", {\r\n        /**\r\n         * Currently selected cells' data.\r\n         */\r\n        get: function () {\r\n            return this._getOption('selectedCellData');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('selectedCellData', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"shadeUntilCurrentTime\", {\r\n        /**\r\n         * Specifies whether to apply shading to cover the timetable up to the current time.\r\n         */\r\n        get: function () {\r\n            return this._getOption('shadeUntilCurrentTime');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('shadeUntilCurrentTime', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"showAllDayPanel\", {\r\n        /**\r\n         * Specifies the \"All-day\" panel's visibility. Setting this option to false hides the panel along with the all-day appointments.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showAllDayPanel');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showAllDayPanel', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"showCurrentTimeIndicator\", {\r\n        /**\r\n         * Specifies the current date-time indicator's visibility.\r\n         */\r\n        get: function () {\r\n            return this._getOption('showCurrentTimeIndicator');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('showCurrentTimeIndicator', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"startDateExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines the start of an appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('startDateExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('startDateExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"startDateTimeZoneExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that defines the timezone of the appointment start date.\r\n         */\r\n        get: function () {\r\n            return this._getOption('startDateTimeZoneExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('startDateTimeZoneExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"startDayHour\", {\r\n        /**\r\n         * Specifies the first hour on the time scale. Accepts integer values from 0 to 24.\r\n         */\r\n        get: function () {\r\n            return this._getOption('startDayHour');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('startDayHour', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"tabIndex\", {\r\n        /**\r\n         * Specifies the number of the element when the Tab key is used for navigating.\r\n         */\r\n        get: function () {\r\n            return this._getOption('tabIndex');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('tabIndex', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"textExpr\", {\r\n        /**\r\n         * Specifies the name of the data source item field that holds the subject of an appointment.\r\n         */\r\n        get: function () {\r\n            return this._getOption('textExpr');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('textExpr', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"timeCellTemplate\", {\r\n        /**\r\n         * Specifies a custom template for time scale items.\r\n         */\r\n        get: function () {\r\n            return this._getOption('timeCellTemplate');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('timeCellTemplate', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"timeZone\", {\r\n        /**\r\n         * Specifies the timezone of the widget.\r\n         */\r\n        get: function () {\r\n            return this._getOption('timeZone');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('timeZone', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"useDropDownViewSwitcher\", {\r\n        /**\r\n         * Specifies whether a user can switch views using tabs or a drop-down menu.\r\n         */\r\n        get: function () {\r\n            return this._getOption('useDropDownViewSwitcher');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('useDropDownViewSwitcher', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"views\", {\r\n        /**\r\n         * Specifies and configures the views to be available in the view switcher.\r\n         */\r\n        get: function () {\r\n            return this._getOption('views');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('views', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"visible\", {\r\n        /**\r\n         * Specifies whether the widget is visible.\r\n         */\r\n        get: function () {\r\n            return this._getOption('visible');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('visible', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"width\", {\r\n        /**\r\n         * Specifies the widget's width.\r\n         */\r\n        get: function () {\r\n            return this._getOption('width');\r\n        },\r\n        set: function (value) {\r\n            this._setOption('width', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"resourcesChildren\", {\r\n        get: function () {\r\n            return this._getOption('resources');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('resources', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DxSchedulerComponent.prototype, \"viewsChildren\", {\r\n        get: function () {\r\n            return this._getOption('views');\r\n        },\r\n        set: function (value) {\r\n            this.setChildren('views', value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DxSchedulerComponent.prototype._createInstance = function (element, options) {\r\n        return new DxScheduler(element, options);\r\n    };\r\n    DxSchedulerComponent.prototype.ngOnDestroy = function () {\r\n        this._destroyWidget();\r\n    };\r\n    DxSchedulerComponent.prototype.ngOnChanges = function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n        this.setupChanges('dataSource', changes);\r\n        this.setupChanges('groups', changes);\r\n        this.setupChanges('resources', changes);\r\n        this.setupChanges('selectedCellData', changes);\r\n        this.setupChanges('views', changes);\r\n    };\r\n    DxSchedulerComponent.prototype.setupChanges = function (prop, changes) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    };\r\n    DxSchedulerComponent.prototype.ngDoCheck = function () {\r\n        this._idh.doCheck('dataSource');\r\n        this._idh.doCheck('groups');\r\n        this._idh.doCheck('resources');\r\n        this._idh.doCheck('selectedCellData');\r\n        this._idh.doCheck('views');\r\n        this._watcherHelper.checkWatchers();\r\n        _super.prototype.ngDoCheck.call(this);\r\n        _super.prototype.clearChangedOptions.call(this);\r\n    };\r\n    DxSchedulerComponent.prototype._setOption = function (name, value) {\r\n        var isSetup = this._idh.setupSingle(name, value);\r\n        var isChanged = this._idh.getChanges(name, value) !== null;\r\n        if (isSetup || isChanged) {\r\n            _super.prototype._setOption.call(this, name, value);\r\n        }\r\n    };\r\n    DxSchedulerComponent.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: DxTemplateHost },\r\n        { type: WatcherHelper },\r\n        { type: IterableDifferHelper },\r\n        { type: NestedOptionHost },\r\n        { type: TransferState },\r\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"accessKey\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"adaptivityEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"allDayExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"appointmentCollectorTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"appointmentDragging\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"appointmentTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"appointmentTooltipTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxSchedulerComponent.prototype, \"cellDuration\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"crossScrollingEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"currentDate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"currentView\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Function),\r\n        __metadata(\"design:paramtypes\", [Function])\r\n    ], DxSchedulerComponent.prototype, \"customizeDateNavigatorText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"dataCellTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"dataSource\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"dateCellTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"dateSerializationFormat\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"descriptionExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"disabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"dropDownAppointmentTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"editing\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"elementAttr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"endDateExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"endDateTimeZoneExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxSchedulerComponent.prototype, \"endDayHour\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"firstDayOfWeek\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"focusStateEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"groupByDate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxSchedulerComponent.prototype, \"groups\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"height\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"hint\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxSchedulerComponent.prototype, \"indicatorUpdateInterval\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"max\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"maxAppointmentsPerCell\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"min\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"noDataText\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"recurrenceEditMode\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"recurrenceExceptionExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"recurrenceRuleExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"remoteFiltering\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"resourceCellTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxSchedulerComponent.prototype, \"resources\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"rtlEnabled\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Array),\r\n        __metadata(\"design:paramtypes\", [Array])\r\n    ], DxSchedulerComponent.prototype, \"selectedCellData\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"shadeUntilCurrentTime\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"showAllDayPanel\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"showCurrentTimeIndicator\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"startDateExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"startDateTimeZoneExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxSchedulerComponent.prototype, \"startDayHour\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Number),\r\n        __metadata(\"design:paramtypes\", [Number])\r\n    ], DxSchedulerComponent.prototype, \"tabIndex\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"textExpr\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"timeCellTemplate\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", String),\r\n        __metadata(\"design:paramtypes\", [String])\r\n    ], DxSchedulerComponent.prototype, \"timeZone\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"useDropDownViewSwitcher\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"views\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Boolean),\r\n        __metadata(\"design:paramtypes\", [Boolean])\r\n    ], DxSchedulerComponent.prototype, \"visible\", null);\r\n    __decorate([\r\n        Input(),\r\n        __metadata(\"design:type\", Object),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"width\", null);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentAdded\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentAdding\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentContextMenu\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentDblClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentDeleted\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentDeleting\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentFormCreated\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentFormOpening\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentRendered\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentUpdated\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onAppointmentUpdating\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onCellClick\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onCellContextMenu\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onContentReady\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onDisposing\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onInitialized\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"onOptionChanged\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"accessKeyChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"adaptivityEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"allDayExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"appointmentCollectorTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"appointmentDraggingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"appointmentTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"appointmentTooltipTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"cellDurationChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"crossScrollingEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"currentDateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"currentViewChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"customizeDateNavigatorTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"dataCellTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"dataSourceChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"dateCellTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"dateSerializationFormatChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"descriptionExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"disabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"dropDownAppointmentTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"editingChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"elementAttrChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"endDateExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"endDateTimeZoneExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"endDayHourChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"firstDayOfWeekChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"focusStateEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"groupByDateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"groupsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"heightChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"hintChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"indicatorUpdateIntervalChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"maxChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"maxAppointmentsPerCellChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"minChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"noDataTextChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"recurrenceEditModeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"recurrenceExceptionExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"recurrenceRuleExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"remoteFilteringChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"resourceCellTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"resourcesChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"rtlEnabledChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"selectedCellDataChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"shadeUntilCurrentTimeChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"showAllDayPanelChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"showCurrentTimeIndicatorChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"startDateExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"startDateTimeZoneExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"startDayHourChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"tabIndexChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"textExprChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"timeCellTemplateChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"timeZoneChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"useDropDownViewSwitcherChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"viewsChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"visibleChange\", void 0);\r\n    __decorate([\r\n        Output(),\r\n        __metadata(\"design:type\", EventEmitter)\r\n    ], DxSchedulerComponent.prototype, \"widthChange\", void 0);\r\n    __decorate([\r\n        ContentChildren(DxiResourceComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"resourcesChildren\", null);\r\n    __decorate([\r\n        ContentChildren(DxiViewComponent),\r\n        __metadata(\"design:type\", QueryList),\r\n        __metadata(\"design:paramtypes\", [Object])\r\n    ], DxSchedulerComponent.prototype, \"viewsChildren\", null);\r\n    DxSchedulerComponent = __decorate([\r\n        Component({\r\n            selector: 'dx-scheduler',\r\n            template: '',\r\n            providers: [\r\n                DxTemplateHost,\r\n                WatcherHelper,\r\n                NestedOptionHost,\r\n                IterableDifferHelper\r\n            ]\r\n        }),\r\n        __param(7, Inject(PLATFORM_ID)),\r\n        __metadata(\"design:paramtypes\", [ElementRef, NgZone, DxTemplateHost,\r\n            WatcherHelper,\r\n            IterableDifferHelper,\r\n            NestedOptionHost,\r\n            TransferState, Object])\r\n    ], DxSchedulerComponent);\r\n    return DxSchedulerComponent;\r\n}(DxComponent));\r\nvar DxSchedulerModule = /** @class */ (function () {\r\n    function DxSchedulerModule() {\r\n    }\r\n    DxSchedulerModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                DxoAppointmentDraggingModule,\r\n                DxoEditingModule,\r\n                DxiResourceModule,\r\n                DxiViewModule,\r\n                DxIntegrationModule,\r\n                DxTemplateModule,\r\n                BrowserTransferStateModule\r\n            ],\r\n            declarations: [\r\n                DxSchedulerComponent\r\n            ],\r\n            exports: [\r\n                DxSchedulerComponent,\r\n                DxoAppointmentDraggingModule,\r\n                DxoEditingModule,\r\n                DxiResourceModule,\r\n                DxiViewModule,\r\n                DxTemplateModule\r\n            ]\r\n        })\r\n    ], DxSchedulerModule);\r\n    return DxSchedulerModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DxSchedulerComponent, DxSchedulerModule };\n"]}