{"version":3,"sources":["C:/Users/ASUS/Documents/Work/argon-dashboard-pro-angular-v1.1.1/node_modules/ngx-clipboard/fesm5/ngx-clipboard.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAgKmC,AAE5B;;;;;;;;;;;;;;kCACkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAsE6B;;;;;;;;;;;;;;;;;;;;;;;;;;oBAK3B;;;;;;;;;;;;;;;;;;;SAmBlB;;;;;;;;2IAK6B;;;;;;KAMjC;;;;;;;;;;;;;gDAOmB","file":"ngx-clipboard.js","sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, Input, Output, HostListener, Directive, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nvar ClipboardService = /** @class */ (function () {\r\n    function ClipboardService(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    ClipboardService.prototype.configure = function (config) {\r\n        this.config = config;\r\n    };\r\n    ClipboardService.prototype.copy = function (content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content: content });\r\n        }\r\n        var copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content: content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content: content });\r\n    };\r\n    Object.defineProperty(ClipboardService.prototype, \"isSupported\", {\r\n        get: function () {\r\n            return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ClipboardService.prototype.isTargetValid = function (element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    };\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    ClipboardService.prototype.copyFromInputElement = function (targetElm, isFocus) {\r\n        if (isFocus === void 0) { isFocus = true; }\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            var re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    ClipboardService.prototype.isCopySuccessInIE11 = function () {\r\n        var clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    ClipboardService.prototype.copyFromContent = function (content, container) {\r\n        if (container === void 0) { container = this.document.body; }\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        var toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement);\r\n        }\r\n        return toReturn;\r\n    };\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    ClipboardService.prototype.destroy = function (container) {\r\n        if (container === void 0) { container = this.document.body; }\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    ClipboardService.prototype.selectTarget = function (inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    };\r\n    ClipboardService.prototype.copyText = function () {\r\n        return this.document.execCommand('copy');\r\n    };\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    ClipboardService.prototype.clearSelection = function (inputElement, window) {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection().removeAllRanges();\r\n    };\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    ClipboardService.prototype.createTempTextArea = function (doc, window) {\r\n        var isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        var ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        var yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    };\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    ClipboardService.prototype.pushCopyResponse = function (response) {\r\n        this.copySubject.next(response);\r\n    };\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    ClipboardService.prototype.pushCopyReponse = function (response) {\r\n        this.pushCopyResponse(response);\r\n    };\r\n    ClipboardService.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n    ]; };\r\n    ClipboardService.ɵprov = ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\n    ClipboardService = __decorate([\r\n        Injectable({ providedIn: 'root' }),\r\n        __param(0, Inject(DOCUMENT)), __param(1, Optional()), __param(1, Inject(WINDOW))\r\n    ], ClipboardService);\r\n    return ClipboardService;\r\n}());\n\nvar ClipboardDirective = /** @class */ (function () {\r\n    function ClipboardDirective(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    ClipboardDirective.prototype.ngOnInit = function () { };\r\n    ClipboardDirective.prototype.ngOnDestroy = function () {\r\n        this.clipboardSrv.destroy(this.container);\r\n    };\r\n    ClipboardDirective.prototype.onClick = function (event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    };\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    ClipboardDirective.prototype.handleResult = function (succeeded, copiedContent, event) {\r\n        var response = {\r\n            isSuccess: succeeded,\r\n            event: event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    };\r\n    ClipboardDirective.ctorParameters = function () { return [\r\n        { type: ClipboardService }\r\n    ]; };\r\n    __decorate([\r\n        Input('ngxClipboard')\r\n    ], ClipboardDirective.prototype, \"targetElm\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], ClipboardDirective.prototype, \"container\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], ClipboardDirective.prototype, \"cbContent\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], ClipboardDirective.prototype, \"cbSuccessMsg\", void 0);\r\n    __decorate([\r\n        Output()\r\n    ], ClipboardDirective.prototype, \"cbOnSuccess\", void 0);\r\n    __decorate([\r\n        Output()\r\n    ], ClipboardDirective.prototype, \"cbOnError\", void 0);\r\n    __decorate([\r\n        HostListener('click', ['$event.target'])\r\n    ], ClipboardDirective.prototype, \"onClick\", null);\r\n    ClipboardDirective = __decorate([\r\n        Directive({\r\n            selector: '[ngxClipboard]'\r\n        })\r\n    ], ClipboardDirective);\r\n    return ClipboardDirective;\r\n}());\n\nvar ClipboardIfSupportedDirective = /** @class */ (function () {\r\n    function ClipboardIfSupportedDirective(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    ClipboardIfSupportedDirective.prototype.ngOnInit = function () {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    };\r\n    ClipboardIfSupportedDirective.ctorParameters = function () { return [\r\n        { type: ClipboardService },\r\n        { type: ViewContainerRef },\r\n        { type: TemplateRef }\r\n    ]; };\r\n    ClipboardIfSupportedDirective = __decorate([\r\n        Directive({\r\n            selector: '[ngxClipboardIfSupported]'\r\n        })\r\n    ], ClipboardIfSupportedDirective);\r\n    return ClipboardIfSupportedDirective;\r\n}());\n\nvar ClipboardModule = /** @class */ (function () {\r\n    function ClipboardModule() {\r\n    }\r\n    ClipboardModule = __decorate([\r\n        NgModule({\r\n            imports: [CommonModule],\r\n            declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n            exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n        })\r\n    ], ClipboardModule);\r\n    return ClipboardModule;\r\n}());\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n"]}